// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: CoSimulation.proto
#ifndef GRPC_CoSimulation_2eproto__INCLUDED
#define GRPC_CoSimulation_2eproto__INCLUDED

#include "CoSimulation.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace CoSimulation {

// rpc service
class CoSimulationService final {
 public:
  static constexpr char const* service_full_name() {
    return "CoSimulation.CoSimulationService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // send one extern vehicle data
    virtual ::grpc::Status sendVehicleDataAndReceiveVehicleList(::grpc::ClientContext* context, const ::CoSimulation::VehicleProto& request, ::CoSimulation::TessngVehicleList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CoSimulation::TessngVehicleList>> AsyncsendVehicleDataAndReceiveVehicleList(::grpc::ClientContext* context, const ::CoSimulation::VehicleProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CoSimulation::TessngVehicleList>>(AsyncsendVehicleDataAndReceiveVehicleListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CoSimulation::TessngVehicleList>> PrepareAsyncsendVehicleDataAndReceiveVehicleList(::grpc::ClientContext* context, const ::CoSimulation::VehicleProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CoSimulation::TessngVehicleList>>(PrepareAsyncsendVehicleDataAndReceiveVehicleListRaw(context, request, cq));
    }
    // send multi extern vehicle data
    virtual ::grpc::Status sendVehicleListAndReceiveVehicleList(::grpc::ClientContext* context, const ::CoSimulation::VehicleList& request, ::CoSimulation::TessngVehicleList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CoSimulation::TessngVehicleList>> AsyncsendVehicleListAndReceiveVehicleList(::grpc::ClientContext* context, const ::CoSimulation::VehicleList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CoSimulation::TessngVehicleList>>(AsyncsendVehicleListAndReceiveVehicleListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CoSimulation::TessngVehicleList>> PrepareAsyncsendVehicleListAndReceiveVehicleList(::grpc::ClientContext* context, const ::CoSimulation::VehicleList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CoSimulation::TessngVehicleList>>(PrepareAsyncsendVehicleListAndReceiveVehicleListRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // send one extern vehicle data
      virtual void sendVehicleDataAndReceiveVehicleList(::grpc::ClientContext* context, const ::CoSimulation::VehicleProto* request, ::CoSimulation::TessngVehicleList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void sendVehicleDataAndReceiveVehicleList(::grpc::ClientContext* context, const ::CoSimulation::VehicleProto* request, ::CoSimulation::TessngVehicleList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // send multi extern vehicle data
      virtual void sendVehicleListAndReceiveVehicleList(::grpc::ClientContext* context, const ::CoSimulation::VehicleList* request, ::CoSimulation::TessngVehicleList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void sendVehicleListAndReceiveVehicleList(::grpc::ClientContext* context, const ::CoSimulation::VehicleList* request, ::CoSimulation::TessngVehicleList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CoSimulation::TessngVehicleList>* AsyncsendVehicleDataAndReceiveVehicleListRaw(::grpc::ClientContext* context, const ::CoSimulation::VehicleProto& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CoSimulation::TessngVehicleList>* PrepareAsyncsendVehicleDataAndReceiveVehicleListRaw(::grpc::ClientContext* context, const ::CoSimulation::VehicleProto& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CoSimulation::TessngVehicleList>* AsyncsendVehicleListAndReceiveVehicleListRaw(::grpc::ClientContext* context, const ::CoSimulation::VehicleList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CoSimulation::TessngVehicleList>* PrepareAsyncsendVehicleListAndReceiveVehicleListRaw(::grpc::ClientContext* context, const ::CoSimulation::VehicleList& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status sendVehicleDataAndReceiveVehicleList(::grpc::ClientContext* context, const ::CoSimulation::VehicleProto& request, ::CoSimulation::TessngVehicleList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CoSimulation::TessngVehicleList>> AsyncsendVehicleDataAndReceiveVehicleList(::grpc::ClientContext* context, const ::CoSimulation::VehicleProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CoSimulation::TessngVehicleList>>(AsyncsendVehicleDataAndReceiveVehicleListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CoSimulation::TessngVehicleList>> PrepareAsyncsendVehicleDataAndReceiveVehicleList(::grpc::ClientContext* context, const ::CoSimulation::VehicleProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CoSimulation::TessngVehicleList>>(PrepareAsyncsendVehicleDataAndReceiveVehicleListRaw(context, request, cq));
    }
    ::grpc::Status sendVehicleListAndReceiveVehicleList(::grpc::ClientContext* context, const ::CoSimulation::VehicleList& request, ::CoSimulation::TessngVehicleList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CoSimulation::TessngVehicleList>> AsyncsendVehicleListAndReceiveVehicleList(::grpc::ClientContext* context, const ::CoSimulation::VehicleList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CoSimulation::TessngVehicleList>>(AsyncsendVehicleListAndReceiveVehicleListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CoSimulation::TessngVehicleList>> PrepareAsyncsendVehicleListAndReceiveVehicleList(::grpc::ClientContext* context, const ::CoSimulation::VehicleList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CoSimulation::TessngVehicleList>>(PrepareAsyncsendVehicleListAndReceiveVehicleListRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void sendVehicleDataAndReceiveVehicleList(::grpc::ClientContext* context, const ::CoSimulation::VehicleProto* request, ::CoSimulation::TessngVehicleList* response, std::function<void(::grpc::Status)>) override;
      void sendVehicleDataAndReceiveVehicleList(::grpc::ClientContext* context, const ::CoSimulation::VehicleProto* request, ::CoSimulation::TessngVehicleList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void sendVehicleListAndReceiveVehicleList(::grpc::ClientContext* context, const ::CoSimulation::VehicleList* request, ::CoSimulation::TessngVehicleList* response, std::function<void(::grpc::Status)>) override;
      void sendVehicleListAndReceiveVehicleList(::grpc::ClientContext* context, const ::CoSimulation::VehicleList* request, ::CoSimulation::TessngVehicleList* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::CoSimulation::TessngVehicleList>* AsyncsendVehicleDataAndReceiveVehicleListRaw(::grpc::ClientContext* context, const ::CoSimulation::VehicleProto& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CoSimulation::TessngVehicleList>* PrepareAsyncsendVehicleDataAndReceiveVehicleListRaw(::grpc::ClientContext* context, const ::CoSimulation::VehicleProto& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CoSimulation::TessngVehicleList>* AsyncsendVehicleListAndReceiveVehicleListRaw(::grpc::ClientContext* context, const ::CoSimulation::VehicleList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CoSimulation::TessngVehicleList>* PrepareAsyncsendVehicleListAndReceiveVehicleListRaw(::grpc::ClientContext* context, const ::CoSimulation::VehicleList& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_sendVehicleDataAndReceiveVehicleList_;
    const ::grpc::internal::RpcMethod rpcmethod_sendVehicleListAndReceiveVehicleList_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // send one extern vehicle data
    virtual ::grpc::Status sendVehicleDataAndReceiveVehicleList(::grpc::ServerContext* context, const ::CoSimulation::VehicleProto* request, ::CoSimulation::TessngVehicleList* response);
    // send multi extern vehicle data
    virtual ::grpc::Status sendVehicleListAndReceiveVehicleList(::grpc::ServerContext* context, const ::CoSimulation::VehicleList* request, ::CoSimulation::TessngVehicleList* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_sendVehicleDataAndReceiveVehicleList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_sendVehicleDataAndReceiveVehicleList() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_sendVehicleDataAndReceiveVehicleList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendVehicleDataAndReceiveVehicleList(::grpc::ServerContext* /*context*/, const ::CoSimulation::VehicleProto* /*request*/, ::CoSimulation::TessngVehicleList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendVehicleDataAndReceiveVehicleList(::grpc::ServerContext* context, ::CoSimulation::VehicleProto* request, ::grpc::ServerAsyncResponseWriter< ::CoSimulation::TessngVehicleList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_sendVehicleListAndReceiveVehicleList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_sendVehicleListAndReceiveVehicleList() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_sendVehicleListAndReceiveVehicleList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendVehicleListAndReceiveVehicleList(::grpc::ServerContext* /*context*/, const ::CoSimulation::VehicleList* /*request*/, ::CoSimulation::TessngVehicleList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendVehicleListAndReceiveVehicleList(::grpc::ServerContext* context, ::CoSimulation::VehicleList* request, ::grpc::ServerAsyncResponseWriter< ::CoSimulation::TessngVehicleList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_sendVehicleDataAndReceiveVehicleList<WithAsyncMethod_sendVehicleListAndReceiveVehicleList<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_sendVehicleDataAndReceiveVehicleList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_sendVehicleDataAndReceiveVehicleList() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::CoSimulation::VehicleProto, ::CoSimulation::TessngVehicleList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::CoSimulation::VehicleProto* request, ::CoSimulation::TessngVehicleList* response) { return this->sendVehicleDataAndReceiveVehicleList(context, request, response); }));}
    void SetMessageAllocatorFor_sendVehicleDataAndReceiveVehicleList(
        ::grpc::MessageAllocator< ::CoSimulation::VehicleProto, ::CoSimulation::TessngVehicleList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::CoSimulation::VehicleProto, ::CoSimulation::TessngVehicleList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_sendVehicleDataAndReceiveVehicleList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendVehicleDataAndReceiveVehicleList(::grpc::ServerContext* /*context*/, const ::CoSimulation::VehicleProto* /*request*/, ::CoSimulation::TessngVehicleList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sendVehicleDataAndReceiveVehicleList(
      ::grpc::CallbackServerContext* /*context*/, const ::CoSimulation::VehicleProto* /*request*/, ::CoSimulation::TessngVehicleList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_sendVehicleListAndReceiveVehicleList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_sendVehicleListAndReceiveVehicleList() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::CoSimulation::VehicleList, ::CoSimulation::TessngVehicleList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::CoSimulation::VehicleList* request, ::CoSimulation::TessngVehicleList* response) { return this->sendVehicleListAndReceiveVehicleList(context, request, response); }));}
    void SetMessageAllocatorFor_sendVehicleListAndReceiveVehicleList(
        ::grpc::MessageAllocator< ::CoSimulation::VehicleList, ::CoSimulation::TessngVehicleList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::CoSimulation::VehicleList, ::CoSimulation::TessngVehicleList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_sendVehicleListAndReceiveVehicleList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendVehicleListAndReceiveVehicleList(::grpc::ServerContext* /*context*/, const ::CoSimulation::VehicleList* /*request*/, ::CoSimulation::TessngVehicleList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sendVehicleListAndReceiveVehicleList(
      ::grpc::CallbackServerContext* /*context*/, const ::CoSimulation::VehicleList* /*request*/, ::CoSimulation::TessngVehicleList* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_sendVehicleDataAndReceiveVehicleList<WithCallbackMethod_sendVehicleListAndReceiveVehicleList<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_sendVehicleDataAndReceiveVehicleList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_sendVehicleDataAndReceiveVehicleList() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_sendVehicleDataAndReceiveVehicleList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendVehicleDataAndReceiveVehicleList(::grpc::ServerContext* /*context*/, const ::CoSimulation::VehicleProto* /*request*/, ::CoSimulation::TessngVehicleList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_sendVehicleListAndReceiveVehicleList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_sendVehicleListAndReceiveVehicleList() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_sendVehicleListAndReceiveVehicleList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendVehicleListAndReceiveVehicleList(::grpc::ServerContext* /*context*/, const ::CoSimulation::VehicleList* /*request*/, ::CoSimulation::TessngVehicleList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_sendVehicleDataAndReceiveVehicleList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_sendVehicleDataAndReceiveVehicleList() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_sendVehicleDataAndReceiveVehicleList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendVehicleDataAndReceiveVehicleList(::grpc::ServerContext* /*context*/, const ::CoSimulation::VehicleProto* /*request*/, ::CoSimulation::TessngVehicleList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendVehicleDataAndReceiveVehicleList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_sendVehicleListAndReceiveVehicleList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_sendVehicleListAndReceiveVehicleList() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_sendVehicleListAndReceiveVehicleList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendVehicleListAndReceiveVehicleList(::grpc::ServerContext* /*context*/, const ::CoSimulation::VehicleList* /*request*/, ::CoSimulation::TessngVehicleList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendVehicleListAndReceiveVehicleList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_sendVehicleDataAndReceiveVehicleList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_sendVehicleDataAndReceiveVehicleList() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->sendVehicleDataAndReceiveVehicleList(context, request, response); }));
    }
    ~WithRawCallbackMethod_sendVehicleDataAndReceiveVehicleList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendVehicleDataAndReceiveVehicleList(::grpc::ServerContext* /*context*/, const ::CoSimulation::VehicleProto* /*request*/, ::CoSimulation::TessngVehicleList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sendVehicleDataAndReceiveVehicleList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_sendVehicleListAndReceiveVehicleList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_sendVehicleListAndReceiveVehicleList() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->sendVehicleListAndReceiveVehicleList(context, request, response); }));
    }
    ~WithRawCallbackMethod_sendVehicleListAndReceiveVehicleList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendVehicleListAndReceiveVehicleList(::grpc::ServerContext* /*context*/, const ::CoSimulation::VehicleList* /*request*/, ::CoSimulation::TessngVehicleList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sendVehicleListAndReceiveVehicleList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_sendVehicleDataAndReceiveVehicleList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_sendVehicleDataAndReceiveVehicleList() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::CoSimulation::VehicleProto, ::CoSimulation::TessngVehicleList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::CoSimulation::VehicleProto, ::CoSimulation::TessngVehicleList>* streamer) {
                       return this->StreamedsendVehicleDataAndReceiveVehicleList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_sendVehicleDataAndReceiveVehicleList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status sendVehicleDataAndReceiveVehicleList(::grpc::ServerContext* /*context*/, const ::CoSimulation::VehicleProto* /*request*/, ::CoSimulation::TessngVehicleList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsendVehicleDataAndReceiveVehicleList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CoSimulation::VehicleProto,::CoSimulation::TessngVehicleList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_sendVehicleListAndReceiveVehicleList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_sendVehicleListAndReceiveVehicleList() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::CoSimulation::VehicleList, ::CoSimulation::TessngVehicleList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::CoSimulation::VehicleList, ::CoSimulation::TessngVehicleList>* streamer) {
                       return this->StreamedsendVehicleListAndReceiveVehicleList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_sendVehicleListAndReceiveVehicleList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status sendVehicleListAndReceiveVehicleList(::grpc::ServerContext* /*context*/, const ::CoSimulation::VehicleList* /*request*/, ::CoSimulation::TessngVehicleList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsendVehicleListAndReceiveVehicleList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CoSimulation::VehicleList,::CoSimulation::TessngVehicleList>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_sendVehicleDataAndReceiveVehicleList<WithStreamedUnaryMethod_sendVehicleListAndReceiveVehicleList<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_sendVehicleDataAndReceiveVehicleList<WithStreamedUnaryMethod_sendVehicleListAndReceiveVehicleList<Service > > StreamedService;
};

}  // namespace CoSimulation


#endif  // GRPC_CoSimulation_2eproto__INCLUDED
