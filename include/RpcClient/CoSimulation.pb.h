// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CoSimulation.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_CoSimulation_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_CoSimulation_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_CoSimulation_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_CoSimulation_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_CoSimulation_2eproto;
namespace CoSimulation {
class Point3D;
struct Point3DDefaultTypeInternal;
extern Point3DDefaultTypeInternal _Point3D_default_instance_;
class Rotation;
struct RotationDefaultTypeInternal;
extern RotationDefaultTypeInternal _Rotation_default_instance_;
class Size;
struct SizeDefaultTypeInternal;
extern SizeDefaultTypeInternal _Size_default_instance_;
class TessngVehicleList;
struct TessngVehicleListDefaultTypeInternal;
extern TessngVehicleListDefaultTypeInternal _TessngVehicleList_default_instance_;
class TessngVehicleProto;
struct TessngVehicleProtoDefaultTypeInternal;
extern TessngVehicleProtoDefaultTypeInternal _TessngVehicleProto_default_instance_;
class VehicleList;
struct VehicleListDefaultTypeInternal;
extern VehicleListDefaultTypeInternal _VehicleList_default_instance_;
class VehicleProto;
struct VehicleProtoDefaultTypeInternal;
extern VehicleProtoDefaultTypeInternal _VehicleProto_default_instance_;
}  // namespace CoSimulation
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace CoSimulation {
enum Type : int {
  UNKNOWN = 0,
  UNKNOWN_MOVABLE = 1,
  UNKNOWN_UNMOVABLE = 2,
  PEDESTRIAN = 3,
  BICYCLE = 4,
  VEHICLE = 5,
  Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Type_IsValid(int value);
extern const uint32_t Type_internal_data_[];
constexpr Type Type_MIN = static_cast<Type>(0);
constexpr Type Type_MAX = static_cast<Type>(5);
constexpr int Type_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
Type_descriptor();
template <typename T>
const std::string& Type_Name(T value) {
  static_assert(std::is_same<T, Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return Type_Name(static_cast<Type>(value));
}
template <>
inline const std::string& Type_Name(Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Type_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool Type_Parse(absl::string_view name, Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Type>(
      Type_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Size final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CoSimulation.Size) */ {
 public:
  inline Size() : Size(nullptr) {}
  ~Size() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Size(::google::protobuf::internal::ConstantInitialized);

  inline Size(const Size& from)
      : Size(nullptr, from) {}
  Size(Size&& from) noexcept
    : Size() {
    *this = ::std::move(from);
  }

  inline Size& operator=(const Size& from) {
    CopyFrom(from);
    return *this;
  }
  inline Size& operator=(Size&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Size& default_instance() {
    return *internal_default_instance();
  }
  static inline const Size* internal_default_instance() {
    return reinterpret_cast<const Size*>(
               &_Size_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Size& a, Size& b) {
    a.Swap(&b);
  }
  inline void Swap(Size* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Size* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Size* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Size>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Size& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Size& from) {
    Size::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Size* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "CoSimulation.Size";
  }
  protected:
  explicit Size(::google::protobuf::Arena* arena);
  Size(::google::protobuf::Arena* arena, const Size& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLengthFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // double length = 1;
  void clear_length() ;
  double length() const;
  void set_length(double value);

  private:
  double _internal_length() const;
  void _internal_set_length(double value);

  public:
  // double width = 2;
  void clear_width() ;
  double width() const;
  void set_width(double value);

  private:
  double _internal_width() const;
  void _internal_set_width(double value);

  public:
  // double height = 3;
  void clear_height() ;
  double height() const;
  void set_height(double value);

  private:
  double _internal_height() const;
  void _internal_set_height(double value);

  public:
  // @@protoc_insertion_point(class_scope:CoSimulation.Size)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    double length_;
    double width_;
    double height_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CoSimulation_2eproto;
};// -------------------------------------------------------------------

class Rotation final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CoSimulation.Rotation) */ {
 public:
  inline Rotation() : Rotation(nullptr) {}
  ~Rotation() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Rotation(::google::protobuf::internal::ConstantInitialized);

  inline Rotation(const Rotation& from)
      : Rotation(nullptr, from) {}
  Rotation(Rotation&& from) noexcept
    : Rotation() {
    *this = ::std::move(from);
  }

  inline Rotation& operator=(const Rotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rotation& operator=(Rotation&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rotation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rotation* internal_default_instance() {
    return reinterpret_cast<const Rotation*>(
               &_Rotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Rotation& a, Rotation& b) {
    a.Swap(&b);
  }
  inline void Swap(Rotation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rotation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Rotation* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Rotation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Rotation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Rotation& from) {
    Rotation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Rotation* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "CoSimulation.Rotation";
  }
  protected:
  explicit Rotation(::google::protobuf::Arena* arena);
  Rotation(::google::protobuf::Arena* arena, const Rotation& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYawFieldNumber = 1,
    kPitchFieldNumber = 2,
    kRollFieldNumber = 3,
  };
  // double yaw = 1;
  void clear_yaw() ;
  double yaw() const;
  void set_yaw(double value);

  private:
  double _internal_yaw() const;
  void _internal_set_yaw(double value);

  public:
  // double pitch = 2;
  void clear_pitch() ;
  double pitch() const;
  void set_pitch(double value);

  private:
  double _internal_pitch() const;
  void _internal_set_pitch(double value);

  public:
  // double roll = 3;
  void clear_roll() ;
  double roll() const;
  void set_roll(double value);

  private:
  double _internal_roll() const;
  void _internal_set_roll(double value);

  public:
  // @@protoc_insertion_point(class_scope:CoSimulation.Rotation)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    double yaw_;
    double pitch_;
    double roll_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CoSimulation_2eproto;
};// -------------------------------------------------------------------

class Point3D final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CoSimulation.Point3D) */ {
 public:
  inline Point3D() : Point3D(nullptr) {}
  ~Point3D() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Point3D(::google::protobuf::internal::ConstantInitialized);

  inline Point3D(const Point3D& from)
      : Point3D(nullptr, from) {}
  Point3D(Point3D&& from) noexcept
    : Point3D() {
    *this = ::std::move(from);
  }

  inline Point3D& operator=(const Point3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point3D& operator=(Point3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point3D* internal_default_instance() {
    return reinterpret_cast<const Point3D*>(
               &_Point3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point3D& a, Point3D& b) {
    a.Swap(&b);
  }
  inline void Swap(Point3D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point3D* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point3D* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point3D>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Point3D& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Point3D& from) {
    Point3D::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Point3D* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "CoSimulation.Point3D";
  }
  protected:
  explicit Point3D(::google::protobuf::Arena* arena);
  Point3D(::google::protobuf::Arena* arena, const Point3D& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x() ;
  double x() const;
  void set_x(double value);

  private:
  double _internal_x() const;
  void _internal_set_x(double value);

  public:
  // double y = 2;
  void clear_y() ;
  double y() const;
  void set_y(double value);

  private:
  double _internal_y() const;
  void _internal_set_y(double value);

  public:
  // double z = 3;
  void clear_z() ;
  double z() const;
  void set_z(double value);

  private:
  double _internal_z() const;
  void _internal_set_z(double value);

  public:
  // @@protoc_insertion_point(class_scope:CoSimulation.Point3D)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    double x_;
    double y_;
    double z_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CoSimulation_2eproto;
};// -------------------------------------------------------------------

class VehicleProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CoSimulation.VehicleProto) */ {
 public:
  inline VehicleProto() : VehicleProto(nullptr) {}
  ~VehicleProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VehicleProto(::google::protobuf::internal::ConstantInitialized);

  inline VehicleProto(const VehicleProto& from)
      : VehicleProto(nullptr, from) {}
  VehicleProto(VehicleProto&& from) noexcept
    : VehicleProto() {
    *this = ::std::move(from);
  }

  inline VehicleProto& operator=(const VehicleProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleProto& operator=(VehicleProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VehicleProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const VehicleProto* internal_default_instance() {
    return reinterpret_cast<const VehicleProto*>(
               &_VehicleProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VehicleProto& a, VehicleProto& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VehicleProto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VehicleProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VehicleProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const VehicleProto& from) {
    VehicleProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(VehicleProto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "CoSimulation.VehicleProto";
  }
  protected:
  explicit VehicleProto(::google::protobuf::Arena* arena);
  VehicleProto(::google::protobuf::Arena* arena, const VehicleProto& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 7,
    kPositionFieldNumber = 3,
    kLinearVelocityFieldNumber = 4,
    kSizeFieldNumber = 5,
    kHeadingFieldNumber = 6,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kTimestampFieldNumber = 8,
  };
  // string source = 7;
  void clear_source() ;
  const std::string& source() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_source(Arg_&& arg, Args_... args);
  std::string* mutable_source();
  PROTOBUF_NODISCARD std::string* release_source();
  void set_allocated_source(std::string* value);

  private:
  const std::string& _internal_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(
      const std::string& value);
  std::string* _internal_mutable_source();

  public:
  // .CoSimulation.Point3D position = 3;
  bool has_position() const;
  void clear_position() ;
  const ::CoSimulation::Point3D& position() const;
  PROTOBUF_NODISCARD ::CoSimulation::Point3D* release_position();
  ::CoSimulation::Point3D* mutable_position();
  void set_allocated_position(::CoSimulation::Point3D* value);
  void unsafe_arena_set_allocated_position(::CoSimulation::Point3D* value);
  ::CoSimulation::Point3D* unsafe_arena_release_position();

  private:
  const ::CoSimulation::Point3D& _internal_position() const;
  ::CoSimulation::Point3D* _internal_mutable_position();

  public:
  // .CoSimulation.Point3D linear_velocity = 4;
  bool has_linear_velocity() const;
  void clear_linear_velocity() ;
  const ::CoSimulation::Point3D& linear_velocity() const;
  PROTOBUF_NODISCARD ::CoSimulation::Point3D* release_linear_velocity();
  ::CoSimulation::Point3D* mutable_linear_velocity();
  void set_allocated_linear_velocity(::CoSimulation::Point3D* value);
  void unsafe_arena_set_allocated_linear_velocity(::CoSimulation::Point3D* value);
  ::CoSimulation::Point3D* unsafe_arena_release_linear_velocity();

  private:
  const ::CoSimulation::Point3D& _internal_linear_velocity() const;
  ::CoSimulation::Point3D* _internal_mutable_linear_velocity();

  public:
  // .CoSimulation.Size size = 5;
  bool has_size() const;
  void clear_size() ;
  const ::CoSimulation::Size& size() const;
  PROTOBUF_NODISCARD ::CoSimulation::Size* release_size();
  ::CoSimulation::Size* mutable_size();
  void set_allocated_size(::CoSimulation::Size* value);
  void unsafe_arena_set_allocated_size(::CoSimulation::Size* value);
  ::CoSimulation::Size* unsafe_arena_release_size();

  private:
  const ::CoSimulation::Size& _internal_size() const;
  ::CoSimulation::Size* _internal_mutable_size();

  public:
  // .CoSimulation.Rotation heading = 6;
  bool has_heading() const;
  void clear_heading() ;
  const ::CoSimulation::Rotation& heading() const;
  PROTOBUF_NODISCARD ::CoSimulation::Rotation* release_heading();
  ::CoSimulation::Rotation* mutable_heading();
  void set_allocated_heading(::CoSimulation::Rotation* value);
  void unsafe_arena_set_allocated_heading(::CoSimulation::Rotation* value);
  ::CoSimulation::Rotation* unsafe_arena_release_heading();

  private:
  const ::CoSimulation::Rotation& _internal_heading() const;
  ::CoSimulation::Rotation* _internal_mutable_heading();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // .CoSimulation.Type type = 2;
  void clear_type() ;
  ::CoSimulation::Type type() const;
  void set_type(::CoSimulation::Type value);

  private:
  ::CoSimulation::Type _internal_type() const;
  void _internal_set_type(::CoSimulation::Type value);

  public:
  // double timestamp = 8;
  void clear_timestamp() ;
  double timestamp() const;
  void set_timestamp(double value);

  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);

  public:
  // @@protoc_insertion_point(class_scope:CoSimulation.VehicleProto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 4,
      48, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr source_;
    ::CoSimulation::Point3D* position_;
    ::CoSimulation::Point3D* linear_velocity_;
    ::CoSimulation::Size* size_;
    ::CoSimulation::Rotation* heading_;
    ::int32_t id_;
    int type_;
    double timestamp_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CoSimulation_2eproto;
};// -------------------------------------------------------------------

class TessngVehicleProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CoSimulation.TessngVehicleProto) */ {
 public:
  inline TessngVehicleProto() : TessngVehicleProto(nullptr) {}
  ~TessngVehicleProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TessngVehicleProto(::google::protobuf::internal::ConstantInitialized);

  inline TessngVehicleProto(const TessngVehicleProto& from)
      : TessngVehicleProto(nullptr, from) {}
  TessngVehicleProto(TessngVehicleProto&& from) noexcept
    : TessngVehicleProto() {
    *this = ::std::move(from);
  }

  inline TessngVehicleProto& operator=(const TessngVehicleProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TessngVehicleProto& operator=(TessngVehicleProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TessngVehicleProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const TessngVehicleProto* internal_default_instance() {
    return reinterpret_cast<const TessngVehicleProto*>(
               &_TessngVehicleProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TessngVehicleProto& a, TessngVehicleProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TessngVehicleProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TessngVehicleProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TessngVehicleProto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TessngVehicleProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TessngVehicleProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TessngVehicleProto& from) {
    TessngVehicleProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TessngVehicleProto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "CoSimulation.TessngVehicleProto";
  }
  protected:
  explicit TessngVehicleProto(::google::protobuf::Arena* arena);
  TessngVehicleProto(::google::protobuf::Arena* arena, const TessngVehicleProto& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlueprintFieldNumber = 8,
    kPositionFieldNumber = 4,
    kLinearVelocityFieldNumber = 5,
    kSizeFieldNumber = 6,
    kHeadingFieldNumber = 7,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kVehicleTypeCodeFieldNumber = 3,
  };
  // string blueprint = 8;
  void clear_blueprint() ;
  const std::string& blueprint() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_blueprint(Arg_&& arg, Args_... args);
  std::string* mutable_blueprint();
  PROTOBUF_NODISCARD std::string* release_blueprint();
  void set_allocated_blueprint(std::string* value);

  private:
  const std::string& _internal_blueprint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_blueprint(
      const std::string& value);
  std::string* _internal_mutable_blueprint();

  public:
  // .CoSimulation.Point3D position = 4;
  bool has_position() const;
  void clear_position() ;
  const ::CoSimulation::Point3D& position() const;
  PROTOBUF_NODISCARD ::CoSimulation::Point3D* release_position();
  ::CoSimulation::Point3D* mutable_position();
  void set_allocated_position(::CoSimulation::Point3D* value);
  void unsafe_arena_set_allocated_position(::CoSimulation::Point3D* value);
  ::CoSimulation::Point3D* unsafe_arena_release_position();

  private:
  const ::CoSimulation::Point3D& _internal_position() const;
  ::CoSimulation::Point3D* _internal_mutable_position();

  public:
  // .CoSimulation.Point3D linear_velocity = 5;
  bool has_linear_velocity() const;
  void clear_linear_velocity() ;
  const ::CoSimulation::Point3D& linear_velocity() const;
  PROTOBUF_NODISCARD ::CoSimulation::Point3D* release_linear_velocity();
  ::CoSimulation::Point3D* mutable_linear_velocity();
  void set_allocated_linear_velocity(::CoSimulation::Point3D* value);
  void unsafe_arena_set_allocated_linear_velocity(::CoSimulation::Point3D* value);
  ::CoSimulation::Point3D* unsafe_arena_release_linear_velocity();

  private:
  const ::CoSimulation::Point3D& _internal_linear_velocity() const;
  ::CoSimulation::Point3D* _internal_mutable_linear_velocity();

  public:
  // .CoSimulation.Size size = 6;
  bool has_size() const;
  void clear_size() ;
  const ::CoSimulation::Size& size() const;
  PROTOBUF_NODISCARD ::CoSimulation::Size* release_size();
  ::CoSimulation::Size* mutable_size();
  void set_allocated_size(::CoSimulation::Size* value);
  void unsafe_arena_set_allocated_size(::CoSimulation::Size* value);
  ::CoSimulation::Size* unsafe_arena_release_size();

  private:
  const ::CoSimulation::Size& _internal_size() const;
  ::CoSimulation::Size* _internal_mutable_size();

  public:
  // .CoSimulation.Rotation heading = 7;
  bool has_heading() const;
  void clear_heading() ;
  const ::CoSimulation::Rotation& heading() const;
  PROTOBUF_NODISCARD ::CoSimulation::Rotation* release_heading();
  ::CoSimulation::Rotation* mutable_heading();
  void set_allocated_heading(::CoSimulation::Rotation* value);
  void unsafe_arena_set_allocated_heading(::CoSimulation::Rotation* value);
  ::CoSimulation::Rotation* unsafe_arena_release_heading();

  private:
  const ::CoSimulation::Rotation& _internal_heading() const;
  ::CoSimulation::Rotation* _internal_mutable_heading();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // .CoSimulation.Type type = 2;
  void clear_type() ;
  ::CoSimulation::Type type() const;
  void set_type(::CoSimulation::Type value);

  private:
  ::CoSimulation::Type _internal_type() const;
  void _internal_set_type(::CoSimulation::Type value);

  public:
  // int32 vehicleTypeCode = 3;
  void clear_vehicletypecode() ;
  ::int32_t vehicletypecode() const;
  void set_vehicletypecode(::int32_t value);

  private:
  ::int32_t _internal_vehicletypecode() const;
  void _internal_set_vehicletypecode(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:CoSimulation.TessngVehicleProto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 4,
      57, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr blueprint_;
    ::CoSimulation::Point3D* position_;
    ::CoSimulation::Point3D* linear_velocity_;
    ::CoSimulation::Size* size_;
    ::CoSimulation::Rotation* heading_;
    ::int32_t id_;
    int type_;
    ::int32_t vehicletypecode_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CoSimulation_2eproto;
};// -------------------------------------------------------------------

class VehicleList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CoSimulation.VehicleList) */ {
 public:
  inline VehicleList() : VehicleList(nullptr) {}
  ~VehicleList() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VehicleList(::google::protobuf::internal::ConstantInitialized);

  inline VehicleList(const VehicleList& from)
      : VehicleList(nullptr, from) {}
  VehicleList(VehicleList&& from) noexcept
    : VehicleList() {
    *this = ::std::move(from);
  }

  inline VehicleList& operator=(const VehicleList& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleList& operator=(VehicleList&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VehicleList& default_instance() {
    return *internal_default_instance();
  }
  static inline const VehicleList* internal_default_instance() {
    return reinterpret_cast<const VehicleList*>(
               &_VehicleList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(VehicleList& a, VehicleList& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VehicleList* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VehicleList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VehicleList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const VehicleList& from) {
    VehicleList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(VehicleList* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "CoSimulation.VehicleList";
  }
  protected:
  explicit VehicleList(::google::protobuf::Arena* arena);
  VehicleList(::google::protobuf::Arena* arena, const VehicleList& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehiclesFieldNumber = 2,
    kTimestampFieldNumber = 1,
  };
  // repeated .CoSimulation.VehicleProto vehicles = 2;
  int vehicles_size() const;
  private:
  int _internal_vehicles_size() const;

  public:
  void clear_vehicles() ;
  ::CoSimulation::VehicleProto* mutable_vehicles(int index);
  ::google::protobuf::RepeatedPtrField< ::CoSimulation::VehicleProto >*
      mutable_vehicles();
  private:
  const ::google::protobuf::RepeatedPtrField<::CoSimulation::VehicleProto>& _internal_vehicles() const;
  ::google::protobuf::RepeatedPtrField<::CoSimulation::VehicleProto>* _internal_mutable_vehicles();
  public:
  const ::CoSimulation::VehicleProto& vehicles(int index) const;
  ::CoSimulation::VehicleProto* add_vehicles();
  const ::google::protobuf::RepeatedPtrField< ::CoSimulation::VehicleProto >&
      vehicles() const;
  // double timestamp = 1;
  void clear_timestamp() ;
  double timestamp() const;
  void set_timestamp(double value);

  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);

  public:
  // @@protoc_insertion_point(class_scope:CoSimulation.VehicleList)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::CoSimulation::VehicleProto > vehicles_;
    double timestamp_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CoSimulation_2eproto;
};// -------------------------------------------------------------------

class TessngVehicleList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CoSimulation.TessngVehicleList) */ {
 public:
  inline TessngVehicleList() : TessngVehicleList(nullptr) {}
  ~TessngVehicleList() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TessngVehicleList(::google::protobuf::internal::ConstantInitialized);

  inline TessngVehicleList(const TessngVehicleList& from)
      : TessngVehicleList(nullptr, from) {}
  TessngVehicleList(TessngVehicleList&& from) noexcept
    : TessngVehicleList() {
    *this = ::std::move(from);
  }

  inline TessngVehicleList& operator=(const TessngVehicleList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TessngVehicleList& operator=(TessngVehicleList&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TessngVehicleList& default_instance() {
    return *internal_default_instance();
  }
  static inline const TessngVehicleList* internal_default_instance() {
    return reinterpret_cast<const TessngVehicleList*>(
               &_TessngVehicleList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TessngVehicleList& a, TessngVehicleList& b) {
    a.Swap(&b);
  }
  inline void Swap(TessngVehicleList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TessngVehicleList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TessngVehicleList* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TessngVehicleList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TessngVehicleList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TessngVehicleList& from) {
    TessngVehicleList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TessngVehicleList* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "CoSimulation.TessngVehicleList";
  }
  protected:
  explicit TessngVehicleList(::google::protobuf::Arena* arena);
  TessngVehicleList(::google::protobuf::Arena* arena, const TessngVehicleList& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehiclesFieldNumber = 2,
    kTimestampFieldNumber = 1,
  };
  // repeated .CoSimulation.TessngVehicleProto vehicles = 2;
  int vehicles_size() const;
  private:
  int _internal_vehicles_size() const;

  public:
  void clear_vehicles() ;
  ::CoSimulation::TessngVehicleProto* mutable_vehicles(int index);
  ::google::protobuf::RepeatedPtrField< ::CoSimulation::TessngVehicleProto >*
      mutable_vehicles();
  private:
  const ::google::protobuf::RepeatedPtrField<::CoSimulation::TessngVehicleProto>& _internal_vehicles() const;
  ::google::protobuf::RepeatedPtrField<::CoSimulation::TessngVehicleProto>* _internal_mutable_vehicles();
  public:
  const ::CoSimulation::TessngVehicleProto& vehicles(int index) const;
  ::CoSimulation::TessngVehicleProto* add_vehicles();
  const ::google::protobuf::RepeatedPtrField< ::CoSimulation::TessngVehicleProto >&
      vehicles() const;
  // double timestamp = 1;
  void clear_timestamp() ;
  double timestamp() const;
  void set_timestamp(double value);

  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);

  public:
  // @@protoc_insertion_point(class_scope:CoSimulation.TessngVehicleList)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::CoSimulation::TessngVehicleProto > vehicles_;
    double timestamp_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CoSimulation_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Point3D

// double x = 1;
inline void Point3D::clear_x() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.x_ = 0;
}
inline double Point3D::x() const {
  // @@protoc_insertion_point(field_get:CoSimulation.Point3D.x)
  return _internal_x();
}
inline void Point3D::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CoSimulation.Point3D.x)
}
inline double Point3D::_internal_x() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.x_;
}
inline void Point3D::_internal_set_x(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.x_ = value;
}

// double y = 2;
inline void Point3D::clear_y() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.y_ = 0;
}
inline double Point3D::y() const {
  // @@protoc_insertion_point(field_get:CoSimulation.Point3D.y)
  return _internal_y();
}
inline void Point3D::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CoSimulation.Point3D.y)
}
inline double Point3D::_internal_y() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.y_;
}
inline void Point3D::_internal_set_y(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.y_ = value;
}

// double z = 3;
inline void Point3D::clear_z() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.z_ = 0;
}
inline double Point3D::z() const {
  // @@protoc_insertion_point(field_get:CoSimulation.Point3D.z)
  return _internal_z();
}
inline void Point3D::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:CoSimulation.Point3D.z)
}
inline double Point3D::_internal_z() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.z_;
}
inline void Point3D::_internal_set_z(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.z_ = value;
}

// -------------------------------------------------------------------

// Size

// double length = 1;
inline void Size::clear_length() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.length_ = 0;
}
inline double Size::length() const {
  // @@protoc_insertion_point(field_get:CoSimulation.Size.length)
  return _internal_length();
}
inline void Size::set_length(double value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:CoSimulation.Size.length)
}
inline double Size::_internal_length() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.length_;
}
inline void Size::_internal_set_length(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.length_ = value;
}

// double width = 2;
inline void Size::clear_width() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.width_ = 0;
}
inline double Size::width() const {
  // @@protoc_insertion_point(field_get:CoSimulation.Size.width)
  return _internal_width();
}
inline void Size::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:CoSimulation.Size.width)
}
inline double Size::_internal_width() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.width_;
}
inline void Size::_internal_set_width(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.width_ = value;
}

// double height = 3;
inline void Size::clear_height() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.height_ = 0;
}
inline double Size::height() const {
  // @@protoc_insertion_point(field_get:CoSimulation.Size.height)
  return _internal_height();
}
inline void Size::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:CoSimulation.Size.height)
}
inline double Size::_internal_height() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.height_;
}
inline void Size::_internal_set_height(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.height_ = value;
}

// -------------------------------------------------------------------

// Rotation

// double yaw = 1;
inline void Rotation::clear_yaw() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.yaw_ = 0;
}
inline double Rotation::yaw() const {
  // @@protoc_insertion_point(field_get:CoSimulation.Rotation.yaw)
  return _internal_yaw();
}
inline void Rotation::set_yaw(double value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:CoSimulation.Rotation.yaw)
}
inline double Rotation::_internal_yaw() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.yaw_;
}
inline void Rotation::_internal_set_yaw(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.yaw_ = value;
}

// double pitch = 2;
inline void Rotation::clear_pitch() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pitch_ = 0;
}
inline double Rotation::pitch() const {
  // @@protoc_insertion_point(field_get:CoSimulation.Rotation.pitch)
  return _internal_pitch();
}
inline void Rotation::set_pitch(double value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:CoSimulation.Rotation.pitch)
}
inline double Rotation::_internal_pitch() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pitch_;
}
inline void Rotation::_internal_set_pitch(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pitch_ = value;
}

// double roll = 3;
inline void Rotation::clear_roll() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.roll_ = 0;
}
inline double Rotation::roll() const {
  // @@protoc_insertion_point(field_get:CoSimulation.Rotation.roll)
  return _internal_roll();
}
inline void Rotation::set_roll(double value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:CoSimulation.Rotation.roll)
}
inline double Rotation::_internal_roll() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.roll_;
}
inline void Rotation::_internal_set_roll(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.roll_ = value;
}

// -------------------------------------------------------------------

// VehicleProto

// int32 id = 1;
inline void VehicleProto::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = 0;
}
inline ::int32_t VehicleProto::id() const {
  // @@protoc_insertion_point(field_get:CoSimulation.VehicleProto.id)
  return _internal_id();
}
inline void VehicleProto::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CoSimulation.VehicleProto.id)
}
inline ::int32_t VehicleProto::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void VehicleProto::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// .CoSimulation.Type type = 2;
inline void VehicleProto::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
}
inline ::CoSimulation::Type VehicleProto::type() const {
  // @@protoc_insertion_point(field_get:CoSimulation.VehicleProto.type)
  return _internal_type();
}
inline void VehicleProto::set_type(::CoSimulation::Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CoSimulation.VehicleProto.type)
}
inline ::CoSimulation::Type VehicleProto::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::CoSimulation::Type>(_impl_.type_);
}
inline void VehicleProto::_internal_set_type(::CoSimulation::Type value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// .CoSimulation.Point3D position = 3;
inline bool VehicleProto::has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline void VehicleProto::clear_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CoSimulation::Point3D& VehicleProto::_internal_position() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::CoSimulation::Point3D* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::CoSimulation::Point3D&>(::CoSimulation::_Point3D_default_instance_);
}
inline const ::CoSimulation::Point3D& VehicleProto::position() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CoSimulation.VehicleProto.position)
  return _internal_position();
}
inline void VehicleProto::unsafe_arena_set_allocated_position(::CoSimulation::Point3D* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = reinterpret_cast<::CoSimulation::Point3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CoSimulation.VehicleProto.position)
}
inline ::CoSimulation::Point3D* VehicleProto::release_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CoSimulation::Point3D* released = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::CoSimulation::Point3D* VehicleProto::unsafe_arena_release_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CoSimulation.VehicleProto.position)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CoSimulation::Point3D* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::CoSimulation::Point3D* VehicleProto::_internal_mutable_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::CoSimulation::Point3D>(GetArena());
    _impl_.position_ = reinterpret_cast<::CoSimulation::Point3D*>(p);
  }
  return _impl_.position_;
}
inline ::CoSimulation::Point3D* VehicleProto::mutable_position() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::CoSimulation::Point3D* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:CoSimulation.VehicleProto.position)
  return _msg;
}
inline void VehicleProto::set_allocated_position(::CoSimulation::Point3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::CoSimulation::Point3D*>(_impl_.position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::CoSimulation::Point3D*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.position_ = reinterpret_cast<::CoSimulation::Point3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:CoSimulation.VehicleProto.position)
}

// .CoSimulation.Point3D linear_velocity = 4;
inline bool VehicleProto::has_linear_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.linear_velocity_ != nullptr);
  return value;
}
inline void VehicleProto::clear_linear_velocity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.linear_velocity_ != nullptr) _impl_.linear_velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CoSimulation::Point3D& VehicleProto::_internal_linear_velocity() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::CoSimulation::Point3D* p = _impl_.linear_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::CoSimulation::Point3D&>(::CoSimulation::_Point3D_default_instance_);
}
inline const ::CoSimulation::Point3D& VehicleProto::linear_velocity() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CoSimulation.VehicleProto.linear_velocity)
  return _internal_linear_velocity();
}
inline void VehicleProto::unsafe_arena_set_allocated_linear_velocity(::CoSimulation::Point3D* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.linear_velocity_);
  }
  _impl_.linear_velocity_ = reinterpret_cast<::CoSimulation::Point3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CoSimulation.VehicleProto.linear_velocity)
}
inline ::CoSimulation::Point3D* VehicleProto::release_linear_velocity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CoSimulation::Point3D* released = _impl_.linear_velocity_;
  _impl_.linear_velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::CoSimulation::Point3D* VehicleProto::unsafe_arena_release_linear_velocity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CoSimulation.VehicleProto.linear_velocity)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CoSimulation::Point3D* temp = _impl_.linear_velocity_;
  _impl_.linear_velocity_ = nullptr;
  return temp;
}
inline ::CoSimulation::Point3D* VehicleProto::_internal_mutable_linear_velocity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.linear_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::CoSimulation::Point3D>(GetArena());
    _impl_.linear_velocity_ = reinterpret_cast<::CoSimulation::Point3D*>(p);
  }
  return _impl_.linear_velocity_;
}
inline ::CoSimulation::Point3D* VehicleProto::mutable_linear_velocity() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::CoSimulation::Point3D* _msg = _internal_mutable_linear_velocity();
  // @@protoc_insertion_point(field_mutable:CoSimulation.VehicleProto.linear_velocity)
  return _msg;
}
inline void VehicleProto::set_allocated_linear_velocity(::CoSimulation::Point3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::CoSimulation::Point3D*>(_impl_.linear_velocity_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::CoSimulation::Point3D*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.linear_velocity_ = reinterpret_cast<::CoSimulation::Point3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:CoSimulation.VehicleProto.linear_velocity)
}

// .CoSimulation.Size size = 5;
inline bool VehicleProto::has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.size_ != nullptr);
  return value;
}
inline void VehicleProto::clear_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.size_ != nullptr) _impl_.size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::CoSimulation::Size& VehicleProto::_internal_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::CoSimulation::Size* p = _impl_.size_;
  return p != nullptr ? *p : reinterpret_cast<const ::CoSimulation::Size&>(::CoSimulation::_Size_default_instance_);
}
inline const ::CoSimulation::Size& VehicleProto::size() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CoSimulation.VehicleProto.size)
  return _internal_size();
}
inline void VehicleProto::unsafe_arena_set_allocated_size(::CoSimulation::Size* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.size_);
  }
  _impl_.size_ = reinterpret_cast<::CoSimulation::Size*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CoSimulation.VehicleProto.size)
}
inline ::CoSimulation::Size* VehicleProto::release_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CoSimulation::Size* released = _impl_.size_;
  _impl_.size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::CoSimulation::Size* VehicleProto::unsafe_arena_release_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CoSimulation.VehicleProto.size)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CoSimulation::Size* temp = _impl_.size_;
  _impl_.size_ = nullptr;
  return temp;
}
inline ::CoSimulation::Size* VehicleProto::_internal_mutable_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.size_ == nullptr) {
    auto* p = CreateMaybeMessage<::CoSimulation::Size>(GetArena());
    _impl_.size_ = reinterpret_cast<::CoSimulation::Size*>(p);
  }
  return _impl_.size_;
}
inline ::CoSimulation::Size* VehicleProto::mutable_size() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::CoSimulation::Size* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:CoSimulation.VehicleProto.size)
  return _msg;
}
inline void VehicleProto::set_allocated_size(::CoSimulation::Size* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::CoSimulation::Size*>(_impl_.size_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::CoSimulation::Size*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.size_ = reinterpret_cast<::CoSimulation::Size*>(value);
  // @@protoc_insertion_point(field_set_allocated:CoSimulation.VehicleProto.size)
}

// .CoSimulation.Rotation heading = 6;
inline bool VehicleProto::has_heading() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.heading_ != nullptr);
  return value;
}
inline void VehicleProto::clear_heading() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.heading_ != nullptr) _impl_.heading_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::CoSimulation::Rotation& VehicleProto::_internal_heading() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::CoSimulation::Rotation* p = _impl_.heading_;
  return p != nullptr ? *p : reinterpret_cast<const ::CoSimulation::Rotation&>(::CoSimulation::_Rotation_default_instance_);
}
inline const ::CoSimulation::Rotation& VehicleProto::heading() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CoSimulation.VehicleProto.heading)
  return _internal_heading();
}
inline void VehicleProto::unsafe_arena_set_allocated_heading(::CoSimulation::Rotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.heading_);
  }
  _impl_.heading_ = reinterpret_cast<::CoSimulation::Rotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CoSimulation.VehicleProto.heading)
}
inline ::CoSimulation::Rotation* VehicleProto::release_heading() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::CoSimulation::Rotation* released = _impl_.heading_;
  _impl_.heading_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::CoSimulation::Rotation* VehicleProto::unsafe_arena_release_heading() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CoSimulation.VehicleProto.heading)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::CoSimulation::Rotation* temp = _impl_.heading_;
  _impl_.heading_ = nullptr;
  return temp;
}
inline ::CoSimulation::Rotation* VehicleProto::_internal_mutable_heading() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.heading_ == nullptr) {
    auto* p = CreateMaybeMessage<::CoSimulation::Rotation>(GetArena());
    _impl_.heading_ = reinterpret_cast<::CoSimulation::Rotation*>(p);
  }
  return _impl_.heading_;
}
inline ::CoSimulation::Rotation* VehicleProto::mutable_heading() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::CoSimulation::Rotation* _msg = _internal_mutable_heading();
  // @@protoc_insertion_point(field_mutable:CoSimulation.VehicleProto.heading)
  return _msg;
}
inline void VehicleProto::set_allocated_heading(::CoSimulation::Rotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::CoSimulation::Rotation*>(_impl_.heading_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::CoSimulation::Rotation*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.heading_ = reinterpret_cast<::CoSimulation::Rotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:CoSimulation.VehicleProto.heading)
}

// string source = 7;
inline void VehicleProto::clear_source() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.source_.ClearToEmpty();
}
inline const std::string& VehicleProto::source() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CoSimulation.VehicleProto.source)
  return _internal_source();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VehicleProto::set_source(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.source_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CoSimulation.VehicleProto.source)
}
inline std::string* VehicleProto::mutable_source() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:CoSimulation.VehicleProto.source)
  return _s;
}
inline const std::string& VehicleProto::_internal_source() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.source_.Get();
}
inline void VehicleProto::_internal_set_source(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.source_.Set(value, GetArena());
}
inline std::string* VehicleProto::_internal_mutable_source() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.source_.Mutable( GetArena());
}
inline std::string* VehicleProto::release_source() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CoSimulation.VehicleProto.source)
  return _impl_.source_.Release();
}
inline void VehicleProto::set_allocated_source(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.source_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.source_.IsDefault()) {
          _impl_.source_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CoSimulation.VehicleProto.source)
}

// double timestamp = 8;
inline void VehicleProto::clear_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timestamp_ = 0;
}
inline double VehicleProto::timestamp() const {
  // @@protoc_insertion_point(field_get:CoSimulation.VehicleProto.timestamp)
  return _internal_timestamp();
}
inline void VehicleProto::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CoSimulation.VehicleProto.timestamp)
}
inline double VehicleProto::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timestamp_;
}
inline void VehicleProto::_internal_set_timestamp(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timestamp_ = value;
}

// -------------------------------------------------------------------

// VehicleList

// double timestamp = 1;
inline void VehicleList::clear_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timestamp_ = 0;
}
inline double VehicleList::timestamp() const {
  // @@protoc_insertion_point(field_get:CoSimulation.VehicleList.timestamp)
  return _internal_timestamp();
}
inline void VehicleList::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CoSimulation.VehicleList.timestamp)
}
inline double VehicleList::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timestamp_;
}
inline void VehicleList::_internal_set_timestamp(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timestamp_ = value;
}

// repeated .CoSimulation.VehicleProto vehicles = 2;
inline int VehicleList::_internal_vehicles_size() const {
  return _internal_vehicles().size();
}
inline int VehicleList::vehicles_size() const {
  return _internal_vehicles_size();
}
inline void VehicleList::clear_vehicles() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.vehicles_.Clear();
}
inline ::CoSimulation::VehicleProto* VehicleList::mutable_vehicles(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:CoSimulation.VehicleList.vehicles)
  return _internal_mutable_vehicles()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::CoSimulation::VehicleProto>* VehicleList::mutable_vehicles()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:CoSimulation.VehicleList.vehicles)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_vehicles();
}
inline const ::CoSimulation::VehicleProto& VehicleList::vehicles(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CoSimulation.VehicleList.vehicles)
  return _internal_vehicles().Get(index);
}
inline ::CoSimulation::VehicleProto* VehicleList::add_vehicles() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::CoSimulation::VehicleProto* _add = _internal_mutable_vehicles()->Add();
  // @@protoc_insertion_point(field_add:CoSimulation.VehicleList.vehicles)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::CoSimulation::VehicleProto>& VehicleList::vehicles() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:CoSimulation.VehicleList.vehicles)
  return _internal_vehicles();
}
inline const ::google::protobuf::RepeatedPtrField<::CoSimulation::VehicleProto>&
VehicleList::_internal_vehicles() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.vehicles_;
}
inline ::google::protobuf::RepeatedPtrField<::CoSimulation::VehicleProto>*
VehicleList::_internal_mutable_vehicles() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.vehicles_;
}

// -------------------------------------------------------------------

// TessngVehicleProto

// int32 id = 1;
inline void TessngVehicleProto::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = 0;
}
inline ::int32_t TessngVehicleProto::id() const {
  // @@protoc_insertion_point(field_get:CoSimulation.TessngVehicleProto.id)
  return _internal_id();
}
inline void TessngVehicleProto::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CoSimulation.TessngVehicleProto.id)
}
inline ::int32_t TessngVehicleProto::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void TessngVehicleProto::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// .CoSimulation.Type type = 2;
inline void TessngVehicleProto::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
}
inline ::CoSimulation::Type TessngVehicleProto::type() const {
  // @@protoc_insertion_point(field_get:CoSimulation.TessngVehicleProto.type)
  return _internal_type();
}
inline void TessngVehicleProto::set_type(::CoSimulation::Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CoSimulation.TessngVehicleProto.type)
}
inline ::CoSimulation::Type TessngVehicleProto::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::CoSimulation::Type>(_impl_.type_);
}
inline void TessngVehicleProto::_internal_set_type(::CoSimulation::Type value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// int32 vehicleTypeCode = 3;
inline void TessngVehicleProto::clear_vehicletypecode() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.vehicletypecode_ = 0;
}
inline ::int32_t TessngVehicleProto::vehicletypecode() const {
  // @@protoc_insertion_point(field_get:CoSimulation.TessngVehicleProto.vehicleTypeCode)
  return _internal_vehicletypecode();
}
inline void TessngVehicleProto::set_vehicletypecode(::int32_t value) {
  _internal_set_vehicletypecode(value);
  // @@protoc_insertion_point(field_set:CoSimulation.TessngVehicleProto.vehicleTypeCode)
}
inline ::int32_t TessngVehicleProto::_internal_vehicletypecode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.vehicletypecode_;
}
inline void TessngVehicleProto::_internal_set_vehicletypecode(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.vehicletypecode_ = value;
}

// .CoSimulation.Point3D position = 4;
inline bool TessngVehicleProto::has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline void TessngVehicleProto::clear_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CoSimulation::Point3D& TessngVehicleProto::_internal_position() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::CoSimulation::Point3D* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::CoSimulation::Point3D&>(::CoSimulation::_Point3D_default_instance_);
}
inline const ::CoSimulation::Point3D& TessngVehicleProto::position() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CoSimulation.TessngVehicleProto.position)
  return _internal_position();
}
inline void TessngVehicleProto::unsafe_arena_set_allocated_position(::CoSimulation::Point3D* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = reinterpret_cast<::CoSimulation::Point3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CoSimulation.TessngVehicleProto.position)
}
inline ::CoSimulation::Point3D* TessngVehicleProto::release_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CoSimulation::Point3D* released = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::CoSimulation::Point3D* TessngVehicleProto::unsafe_arena_release_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CoSimulation.TessngVehicleProto.position)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CoSimulation::Point3D* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::CoSimulation::Point3D* TessngVehicleProto::_internal_mutable_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::CoSimulation::Point3D>(GetArena());
    _impl_.position_ = reinterpret_cast<::CoSimulation::Point3D*>(p);
  }
  return _impl_.position_;
}
inline ::CoSimulation::Point3D* TessngVehicleProto::mutable_position() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::CoSimulation::Point3D* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:CoSimulation.TessngVehicleProto.position)
  return _msg;
}
inline void TessngVehicleProto::set_allocated_position(::CoSimulation::Point3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::CoSimulation::Point3D*>(_impl_.position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::CoSimulation::Point3D*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.position_ = reinterpret_cast<::CoSimulation::Point3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:CoSimulation.TessngVehicleProto.position)
}

// .CoSimulation.Point3D linear_velocity = 5;
inline bool TessngVehicleProto::has_linear_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.linear_velocity_ != nullptr);
  return value;
}
inline void TessngVehicleProto::clear_linear_velocity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.linear_velocity_ != nullptr) _impl_.linear_velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CoSimulation::Point3D& TessngVehicleProto::_internal_linear_velocity() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::CoSimulation::Point3D* p = _impl_.linear_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::CoSimulation::Point3D&>(::CoSimulation::_Point3D_default_instance_);
}
inline const ::CoSimulation::Point3D& TessngVehicleProto::linear_velocity() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CoSimulation.TessngVehicleProto.linear_velocity)
  return _internal_linear_velocity();
}
inline void TessngVehicleProto::unsafe_arena_set_allocated_linear_velocity(::CoSimulation::Point3D* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.linear_velocity_);
  }
  _impl_.linear_velocity_ = reinterpret_cast<::CoSimulation::Point3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CoSimulation.TessngVehicleProto.linear_velocity)
}
inline ::CoSimulation::Point3D* TessngVehicleProto::release_linear_velocity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CoSimulation::Point3D* released = _impl_.linear_velocity_;
  _impl_.linear_velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::CoSimulation::Point3D* TessngVehicleProto::unsafe_arena_release_linear_velocity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CoSimulation.TessngVehicleProto.linear_velocity)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CoSimulation::Point3D* temp = _impl_.linear_velocity_;
  _impl_.linear_velocity_ = nullptr;
  return temp;
}
inline ::CoSimulation::Point3D* TessngVehicleProto::_internal_mutable_linear_velocity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.linear_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::CoSimulation::Point3D>(GetArena());
    _impl_.linear_velocity_ = reinterpret_cast<::CoSimulation::Point3D*>(p);
  }
  return _impl_.linear_velocity_;
}
inline ::CoSimulation::Point3D* TessngVehicleProto::mutable_linear_velocity() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::CoSimulation::Point3D* _msg = _internal_mutable_linear_velocity();
  // @@protoc_insertion_point(field_mutable:CoSimulation.TessngVehicleProto.linear_velocity)
  return _msg;
}
inline void TessngVehicleProto::set_allocated_linear_velocity(::CoSimulation::Point3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::CoSimulation::Point3D*>(_impl_.linear_velocity_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::CoSimulation::Point3D*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.linear_velocity_ = reinterpret_cast<::CoSimulation::Point3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:CoSimulation.TessngVehicleProto.linear_velocity)
}

// .CoSimulation.Size size = 6;
inline bool TessngVehicleProto::has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.size_ != nullptr);
  return value;
}
inline void TessngVehicleProto::clear_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.size_ != nullptr) _impl_.size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::CoSimulation::Size& TessngVehicleProto::_internal_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::CoSimulation::Size* p = _impl_.size_;
  return p != nullptr ? *p : reinterpret_cast<const ::CoSimulation::Size&>(::CoSimulation::_Size_default_instance_);
}
inline const ::CoSimulation::Size& TessngVehicleProto::size() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CoSimulation.TessngVehicleProto.size)
  return _internal_size();
}
inline void TessngVehicleProto::unsafe_arena_set_allocated_size(::CoSimulation::Size* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.size_);
  }
  _impl_.size_ = reinterpret_cast<::CoSimulation::Size*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CoSimulation.TessngVehicleProto.size)
}
inline ::CoSimulation::Size* TessngVehicleProto::release_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CoSimulation::Size* released = _impl_.size_;
  _impl_.size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::CoSimulation::Size* TessngVehicleProto::unsafe_arena_release_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CoSimulation.TessngVehicleProto.size)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CoSimulation::Size* temp = _impl_.size_;
  _impl_.size_ = nullptr;
  return temp;
}
inline ::CoSimulation::Size* TessngVehicleProto::_internal_mutable_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.size_ == nullptr) {
    auto* p = CreateMaybeMessage<::CoSimulation::Size>(GetArena());
    _impl_.size_ = reinterpret_cast<::CoSimulation::Size*>(p);
  }
  return _impl_.size_;
}
inline ::CoSimulation::Size* TessngVehicleProto::mutable_size() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::CoSimulation::Size* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:CoSimulation.TessngVehicleProto.size)
  return _msg;
}
inline void TessngVehicleProto::set_allocated_size(::CoSimulation::Size* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::CoSimulation::Size*>(_impl_.size_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::CoSimulation::Size*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.size_ = reinterpret_cast<::CoSimulation::Size*>(value);
  // @@protoc_insertion_point(field_set_allocated:CoSimulation.TessngVehicleProto.size)
}

// .CoSimulation.Rotation heading = 7;
inline bool TessngVehicleProto::has_heading() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.heading_ != nullptr);
  return value;
}
inline void TessngVehicleProto::clear_heading() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.heading_ != nullptr) _impl_.heading_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::CoSimulation::Rotation& TessngVehicleProto::_internal_heading() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::CoSimulation::Rotation* p = _impl_.heading_;
  return p != nullptr ? *p : reinterpret_cast<const ::CoSimulation::Rotation&>(::CoSimulation::_Rotation_default_instance_);
}
inline const ::CoSimulation::Rotation& TessngVehicleProto::heading() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CoSimulation.TessngVehicleProto.heading)
  return _internal_heading();
}
inline void TessngVehicleProto::unsafe_arena_set_allocated_heading(::CoSimulation::Rotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.heading_);
  }
  _impl_.heading_ = reinterpret_cast<::CoSimulation::Rotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CoSimulation.TessngVehicleProto.heading)
}
inline ::CoSimulation::Rotation* TessngVehicleProto::release_heading() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::CoSimulation::Rotation* released = _impl_.heading_;
  _impl_.heading_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::CoSimulation::Rotation* TessngVehicleProto::unsafe_arena_release_heading() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CoSimulation.TessngVehicleProto.heading)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::CoSimulation::Rotation* temp = _impl_.heading_;
  _impl_.heading_ = nullptr;
  return temp;
}
inline ::CoSimulation::Rotation* TessngVehicleProto::_internal_mutable_heading() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.heading_ == nullptr) {
    auto* p = CreateMaybeMessage<::CoSimulation::Rotation>(GetArena());
    _impl_.heading_ = reinterpret_cast<::CoSimulation::Rotation*>(p);
  }
  return _impl_.heading_;
}
inline ::CoSimulation::Rotation* TessngVehicleProto::mutable_heading() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::CoSimulation::Rotation* _msg = _internal_mutable_heading();
  // @@protoc_insertion_point(field_mutable:CoSimulation.TessngVehicleProto.heading)
  return _msg;
}
inline void TessngVehicleProto::set_allocated_heading(::CoSimulation::Rotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::CoSimulation::Rotation*>(_impl_.heading_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::CoSimulation::Rotation*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.heading_ = reinterpret_cast<::CoSimulation::Rotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:CoSimulation.TessngVehicleProto.heading)
}

// string blueprint = 8;
inline void TessngVehicleProto::clear_blueprint() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.blueprint_.ClearToEmpty();
}
inline const std::string& TessngVehicleProto::blueprint() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CoSimulation.TessngVehicleProto.blueprint)
  return _internal_blueprint();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TessngVehicleProto::set_blueprint(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.blueprint_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CoSimulation.TessngVehicleProto.blueprint)
}
inline std::string* TessngVehicleProto::mutable_blueprint() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_blueprint();
  // @@protoc_insertion_point(field_mutable:CoSimulation.TessngVehicleProto.blueprint)
  return _s;
}
inline const std::string& TessngVehicleProto::_internal_blueprint() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.blueprint_.Get();
}
inline void TessngVehicleProto::_internal_set_blueprint(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.blueprint_.Set(value, GetArena());
}
inline std::string* TessngVehicleProto::_internal_mutable_blueprint() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.blueprint_.Mutable( GetArena());
}
inline std::string* TessngVehicleProto::release_blueprint() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CoSimulation.TessngVehicleProto.blueprint)
  return _impl_.blueprint_.Release();
}
inline void TessngVehicleProto::set_allocated_blueprint(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.blueprint_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.blueprint_.IsDefault()) {
          _impl_.blueprint_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CoSimulation.TessngVehicleProto.blueprint)
}

// -------------------------------------------------------------------

// TessngVehicleList

// double timestamp = 1;
inline void TessngVehicleList::clear_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timestamp_ = 0;
}
inline double TessngVehicleList::timestamp() const {
  // @@protoc_insertion_point(field_get:CoSimulation.TessngVehicleList.timestamp)
  return _internal_timestamp();
}
inline void TessngVehicleList::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CoSimulation.TessngVehicleList.timestamp)
}
inline double TessngVehicleList::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timestamp_;
}
inline void TessngVehicleList::_internal_set_timestamp(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timestamp_ = value;
}

// repeated .CoSimulation.TessngVehicleProto vehicles = 2;
inline int TessngVehicleList::_internal_vehicles_size() const {
  return _internal_vehicles().size();
}
inline int TessngVehicleList::vehicles_size() const {
  return _internal_vehicles_size();
}
inline void TessngVehicleList::clear_vehicles() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.vehicles_.Clear();
}
inline ::CoSimulation::TessngVehicleProto* TessngVehicleList::mutable_vehicles(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:CoSimulation.TessngVehicleList.vehicles)
  return _internal_mutable_vehicles()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::CoSimulation::TessngVehicleProto>* TessngVehicleList::mutable_vehicles()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:CoSimulation.TessngVehicleList.vehicles)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_vehicles();
}
inline const ::CoSimulation::TessngVehicleProto& TessngVehicleList::vehicles(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CoSimulation.TessngVehicleList.vehicles)
  return _internal_vehicles().Get(index);
}
inline ::CoSimulation::TessngVehicleProto* TessngVehicleList::add_vehicles() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::CoSimulation::TessngVehicleProto* _add = _internal_mutable_vehicles()->Add();
  // @@protoc_insertion_point(field_add:CoSimulation.TessngVehicleList.vehicles)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::CoSimulation::TessngVehicleProto>& TessngVehicleList::vehicles() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:CoSimulation.TessngVehicleList.vehicles)
  return _internal_vehicles();
}
inline const ::google::protobuf::RepeatedPtrField<::CoSimulation::TessngVehicleProto>&
TessngVehicleList::_internal_vehicles() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.vehicles_;
}
inline ::google::protobuf::RepeatedPtrField<::CoSimulation::TessngVehicleProto>*
TessngVehicleList::_internal_mutable_vehicles() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.vehicles_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace CoSimulation


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::CoSimulation::Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::CoSimulation::Type>() {
  return ::CoSimulation::Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_CoSimulation_2eproto_2epb_2eh
