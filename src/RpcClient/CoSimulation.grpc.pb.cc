// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: CoSimulation.proto

#include "CoSimulation.pb.h"
#include "CoSimulation.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace CoSimulation {

static const char* CoSimulationService_method_names[] = {
  "/CoSimulation.CoSimulationService/sendVehicleDataAndReceiveVehicleList",
  "/CoSimulation.CoSimulationService/sendVehicleListAndReceiveVehicleList",
};

std::unique_ptr< CoSimulationService::Stub> CoSimulationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CoSimulationService::Stub> stub(new CoSimulationService::Stub(channel, options));
  return stub;
}

CoSimulationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_sendVehicleDataAndReceiveVehicleList_(CoSimulationService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_sendVehicleListAndReceiveVehicleList_(CoSimulationService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CoSimulationService::Stub::sendVehicleDataAndReceiveVehicleList(::grpc::ClientContext* context, const ::CoSimulation::VehicleProto& request, ::CoSimulation::TessngVehicleList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CoSimulation::VehicleProto, ::CoSimulation::TessngVehicleList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_sendVehicleDataAndReceiveVehicleList_, context, request, response);
}

void CoSimulationService::Stub::async::sendVehicleDataAndReceiveVehicleList(::grpc::ClientContext* context, const ::CoSimulation::VehicleProto* request, ::CoSimulation::TessngVehicleList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CoSimulation::VehicleProto, ::CoSimulation::TessngVehicleList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sendVehicleDataAndReceiveVehicleList_, context, request, response, std::move(f));
}

void CoSimulationService::Stub::async::sendVehicleDataAndReceiveVehicleList(::grpc::ClientContext* context, const ::CoSimulation::VehicleProto* request, ::CoSimulation::TessngVehicleList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sendVehicleDataAndReceiveVehicleList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CoSimulation::TessngVehicleList>* CoSimulationService::Stub::PrepareAsyncsendVehicleDataAndReceiveVehicleListRaw(::grpc::ClientContext* context, const ::CoSimulation::VehicleProto& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CoSimulation::TessngVehicleList, ::CoSimulation::VehicleProto, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_sendVehicleDataAndReceiveVehicleList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CoSimulation::TessngVehicleList>* CoSimulationService::Stub::AsyncsendVehicleDataAndReceiveVehicleListRaw(::grpc::ClientContext* context, const ::CoSimulation::VehicleProto& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsendVehicleDataAndReceiveVehicleListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CoSimulationService::Stub::sendVehicleListAndReceiveVehicleList(::grpc::ClientContext* context, const ::CoSimulation::VehicleList& request, ::CoSimulation::TessngVehicleList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CoSimulation::VehicleList, ::CoSimulation::TessngVehicleList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_sendVehicleListAndReceiveVehicleList_, context, request, response);
}

void CoSimulationService::Stub::async::sendVehicleListAndReceiveVehicleList(::grpc::ClientContext* context, const ::CoSimulation::VehicleList* request, ::CoSimulation::TessngVehicleList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CoSimulation::VehicleList, ::CoSimulation::TessngVehicleList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sendVehicleListAndReceiveVehicleList_, context, request, response, std::move(f));
}

void CoSimulationService::Stub::async::sendVehicleListAndReceiveVehicleList(::grpc::ClientContext* context, const ::CoSimulation::VehicleList* request, ::CoSimulation::TessngVehicleList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sendVehicleListAndReceiveVehicleList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CoSimulation::TessngVehicleList>* CoSimulationService::Stub::PrepareAsyncsendVehicleListAndReceiveVehicleListRaw(::grpc::ClientContext* context, const ::CoSimulation::VehicleList& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CoSimulation::TessngVehicleList, ::CoSimulation::VehicleList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_sendVehicleListAndReceiveVehicleList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CoSimulation::TessngVehicleList>* CoSimulationService::Stub::AsyncsendVehicleListAndReceiveVehicleListRaw(::grpc::ClientContext* context, const ::CoSimulation::VehicleList& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsendVehicleListAndReceiveVehicleListRaw(context, request, cq);
  result->StartCall();
  return result;
}

CoSimulationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CoSimulationService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CoSimulationService::Service, ::CoSimulation::VehicleProto, ::CoSimulation::TessngVehicleList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CoSimulationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CoSimulation::VehicleProto* req,
             ::CoSimulation::TessngVehicleList* resp) {
               return service->sendVehicleDataAndReceiveVehicleList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CoSimulationService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CoSimulationService::Service, ::CoSimulation::VehicleList, ::CoSimulation::TessngVehicleList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CoSimulationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CoSimulation::VehicleList* req,
             ::CoSimulation::TessngVehicleList* resp) {
               return service->sendVehicleListAndReceiveVehicleList(ctx, req, resp);
             }, this)));
}

CoSimulationService::Service::~Service() {
}

::grpc::Status CoSimulationService::Service::sendVehicleDataAndReceiveVehicleList(::grpc::ServerContext* context, const ::CoSimulation::VehicleProto* request, ::CoSimulation::TessngVehicleList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CoSimulationService::Service::sendVehicleListAndReceiveVehicleList(::grpc::ServerContext* context, const ::CoSimulation::VehicleList* request, ::CoSimulation::TessngVehicleList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace CoSimulation

