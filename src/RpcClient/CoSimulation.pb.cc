// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CoSimulation.proto

#include "CoSimulation.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace CoSimulation {

inline constexpr Size::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : length_{0},
        width_{0},
        height_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Size::Size(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SizeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SizeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SizeDefaultTypeInternal() {}
  union {
    Size _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SizeDefaultTypeInternal _Size_default_instance_;

inline constexpr Rotation::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : yaw_{0},
        pitch_{0},
        roll_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Rotation::Rotation(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RotationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RotationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RotationDefaultTypeInternal() {}
  union {
    Rotation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RotationDefaultTypeInternal _Rotation_default_instance_;

inline constexpr Point3D::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_{0},
        y_{0},
        z_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Point3D::Point3D(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct Point3DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Point3DDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Point3DDefaultTypeInternal() {}
  union {
    Point3D _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Point3DDefaultTypeInternal _Point3D_default_instance_;

inline constexpr VehicleProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        source_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        position_{nullptr},
        linear_velocity_{nullptr},
        size_{nullptr},
        heading_{nullptr},
        id_{0},
        type_{static_cast< ::CoSimulation::Type >(0)},
        timestamp_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VehicleProto::VehicleProto(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct VehicleProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VehicleProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VehicleProtoDefaultTypeInternal() {}
  union {
    VehicleProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VehicleProtoDefaultTypeInternal _VehicleProto_default_instance_;

inline constexpr TessngVehicleProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        blueprint_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        position_{nullptr},
        linear_velocity_{nullptr},
        size_{nullptr},
        heading_{nullptr},
        id_{0},
        type_{static_cast< ::CoSimulation::Type >(0)},
        vehicletypecode_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TessngVehicleProto::TessngVehicleProto(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TessngVehicleProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TessngVehicleProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TessngVehicleProtoDefaultTypeInternal() {}
  union {
    TessngVehicleProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TessngVehicleProtoDefaultTypeInternal _TessngVehicleProto_default_instance_;

inline constexpr VehicleList::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : vehicles_{},
        timestamp_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VehicleList::VehicleList(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct VehicleListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VehicleListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VehicleListDefaultTypeInternal() {}
  union {
    VehicleList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VehicleListDefaultTypeInternal _VehicleList_default_instance_;

inline constexpr TessngVehicleList::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : vehicles_{},
        timestamp_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TessngVehicleList::TessngVehicleList(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TessngVehicleListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TessngVehicleListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TessngVehicleListDefaultTypeInternal() {}
  union {
    TessngVehicleList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TessngVehicleListDefaultTypeInternal _TessngVehicleList_default_instance_;
}  // namespace CoSimulation
static ::_pb::Metadata file_level_metadata_CoSimulation_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_CoSimulation_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_CoSimulation_2eproto = nullptr;
const ::uint32_t TableStruct_CoSimulation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::CoSimulation::Point3D, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CoSimulation::Point3D, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::CoSimulation::Point3D, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::CoSimulation::Point3D, _impl_.z_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::CoSimulation::Size, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CoSimulation::Size, _impl_.length_),
    PROTOBUF_FIELD_OFFSET(::CoSimulation::Size, _impl_.width_),
    PROTOBUF_FIELD_OFFSET(::CoSimulation::Size, _impl_.height_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::CoSimulation::Rotation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CoSimulation::Rotation, _impl_.yaw_),
    PROTOBUF_FIELD_OFFSET(::CoSimulation::Rotation, _impl_.pitch_),
    PROTOBUF_FIELD_OFFSET(::CoSimulation::Rotation, _impl_.roll_),
    PROTOBUF_FIELD_OFFSET(::CoSimulation::VehicleProto, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CoSimulation::VehicleProto, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CoSimulation::VehicleProto, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::CoSimulation::VehicleProto, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::CoSimulation::VehicleProto, _impl_.position_),
    PROTOBUF_FIELD_OFFSET(::CoSimulation::VehicleProto, _impl_.linear_velocity_),
    PROTOBUF_FIELD_OFFSET(::CoSimulation::VehicleProto, _impl_.size_),
    PROTOBUF_FIELD_OFFSET(::CoSimulation::VehicleProto, _impl_.heading_),
    PROTOBUF_FIELD_OFFSET(::CoSimulation::VehicleProto, _impl_.source_),
    PROTOBUF_FIELD_OFFSET(::CoSimulation::VehicleProto, _impl_.timestamp_),
    ~0u,
    ~0u,
    0,
    1,
    2,
    3,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::CoSimulation::VehicleList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CoSimulation::VehicleList, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::CoSimulation::VehicleList, _impl_.vehicles_),
    PROTOBUF_FIELD_OFFSET(::CoSimulation::TessngVehicleProto, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CoSimulation::TessngVehicleProto, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CoSimulation::TessngVehicleProto, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::CoSimulation::TessngVehicleProto, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::CoSimulation::TessngVehicleProto, _impl_.vehicletypecode_),
    PROTOBUF_FIELD_OFFSET(::CoSimulation::TessngVehicleProto, _impl_.position_),
    PROTOBUF_FIELD_OFFSET(::CoSimulation::TessngVehicleProto, _impl_.linear_velocity_),
    PROTOBUF_FIELD_OFFSET(::CoSimulation::TessngVehicleProto, _impl_.size_),
    PROTOBUF_FIELD_OFFSET(::CoSimulation::TessngVehicleProto, _impl_.heading_),
    PROTOBUF_FIELD_OFFSET(::CoSimulation::TessngVehicleProto, _impl_.blueprint_),
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    2,
    3,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::CoSimulation::TessngVehicleList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CoSimulation::TessngVehicleList, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::CoSimulation::TessngVehicleList, _impl_.vehicles_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::CoSimulation::Point3D)},
        {11, -1, -1, sizeof(::CoSimulation::Size)},
        {22, -1, -1, sizeof(::CoSimulation::Rotation)},
        {33, 49, -1, sizeof(::CoSimulation::VehicleProto)},
        {57, -1, -1, sizeof(::CoSimulation::VehicleList)},
        {67, 83, -1, sizeof(::CoSimulation::TessngVehicleProto)},
        {91, -1, -1, sizeof(::CoSimulation::TessngVehicleList)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::CoSimulation::_Point3D_default_instance_._instance,
    &::CoSimulation::_Size_default_instance_._instance,
    &::CoSimulation::_Rotation_default_instance_._instance,
    &::CoSimulation::_VehicleProto_default_instance_._instance,
    &::CoSimulation::_VehicleList_default_instance_._instance,
    &::CoSimulation::_TessngVehicleProto_default_instance_._instance,
    &::CoSimulation::_TessngVehicleList_default_instance_._instance,
};
const char descriptor_table_protodef_CoSimulation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\022CoSimulation.proto\022\014CoSimulation\"*\n\007Po"
    "int3D\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"5"
    "\n\004Size\022\016\n\006length\030\001 \001(\001\022\r\n\005width\030\002 \001(\001\022\016\n"
    "\006height\030\003 \001(\001\"4\n\010Rotation\022\013\n\003yaw\030\001 \001(\001\022\r"
    "\n\005pitch\030\002 \001(\001\022\014\n\004roll\030\003 \001(\001\"\203\002\n\014VehicleP"
    "roto\022\n\n\002id\030\001 \001(\005\022 \n\004type\030\002 \001(\0162\022.CoSimul"
    "ation.Type\022\'\n\010position\030\003 \001(\0132\025.CoSimulat"
    "ion.Point3D\022.\n\017linear_velocity\030\004 \001(\0132\025.C"
    "oSimulation.Point3D\022 \n\004size\030\005 \001(\0132\022.CoSi"
    "mulation.Size\022\'\n\007heading\030\006 \001(\0132\026.CoSimul"
    "ation.Rotation\022\016\n\006source\030\007 \001(\t\022\021\n\ttimest"
    "amp\030\010 \001(\001\"N\n\013VehicleList\022\021\n\ttimestamp\030\001 "
    "\001(\001\022,\n\010vehicles\030\002 \003(\0132\032.CoSimulation.Veh"
    "icleProto\"\222\002\n\022TessngVehicleProto\022\n\n\002id\030\001"
    " \001(\005\022 \n\004type\030\002 \001(\0162\022.CoSimulation.Type\022\027"
    "\n\017vehicleTypeCode\030\003 \001(\005\022\'\n\010position\030\004 \001("
    "\0132\025.CoSimulation.Point3D\022.\n\017linear_veloc"
    "ity\030\005 \001(\0132\025.CoSimulation.Point3D\022 \n\004size"
    "\030\006 \001(\0132\022.CoSimulation.Size\022\'\n\007heading\030\007 "
    "\001(\0132\026.CoSimulation.Rotation\022\021\n\tblueprint"
    "\030\010 \001(\t\"Z\n\021TessngVehicleList\022\021\n\ttimestamp"
    "\030\001 \001(\001\0222\n\010vehicles\030\002 \003(\0132 .CoSimulation."
    "TessngVehicleProto*i\n\004Type\022\013\n\007UNKNOWN\020\000\022"
    "\023\n\017UNKNOWN_MOVABLE\020\001\022\025\n\021UNKNOWN_UNMOVABL"
    "E\020\002\022\016\n\nPEDESTRIAN\020\003\022\013\n\007BICYCLE\020\004\022\013\n\007VEHI"
    "CLE\020\0052\336\001\n\023CoSimulationService\022c\n$sendVeh"
    "icleDataAndReceiveVehicleList\022\032.CoSimula"
    "tion.VehicleProto\032\037.CoSimulation.TessngV"
    "ehicleList\022b\n$sendVehicleListAndReceiveV"
    "ehicleList\022\031.CoSimulation.VehicleList\032\037."
    "CoSimulation.TessngVehicleListb\006proto3"
};
static ::absl::once_flag descriptor_table_CoSimulation_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_CoSimulation_2eproto = {
    false,
    false,
    1238,
    descriptor_table_protodef_CoSimulation_2eproto,
    "CoSimulation.proto",
    &descriptor_table_CoSimulation_2eproto_once,
    nullptr,
    0,
    7,
    schemas,
    file_default_instances,
    TableStruct_CoSimulation_2eproto::offsets,
    file_level_metadata_CoSimulation_2eproto,
    file_level_enum_descriptors_CoSimulation_2eproto,
    file_level_service_descriptors_CoSimulation_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_CoSimulation_2eproto_getter() {
  return &descriptor_table_CoSimulation_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_CoSimulation_2eproto(&descriptor_table_CoSimulation_2eproto);
namespace CoSimulation {
const ::google::protobuf::EnumDescriptor* Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_CoSimulation_2eproto);
  return file_level_enum_descriptors_CoSimulation_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t Type_internal_data_[] = {
    393216u, 0u, };
bool Type_IsValid(int value) {
  return 0 <= value && value <= 5;
}
// ===================================================================

class Point3D::_Internal {
 public:
};

Point3D::Point3D(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CoSimulation.Point3D)
}
Point3D::Point3D(
    ::google::protobuf::Arena* arena, const Point3D& from)
    : Point3D(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Point3D::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Point3D::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, z_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::z_));
}
Point3D::~Point3D() {
  // @@protoc_insertion_point(destructor:CoSimulation.Point3D)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Point3D::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Point3D::Clear() {
// @@protoc_insertion_point(message_clear_start:CoSimulation.Point3D)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Point3D::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> Point3D::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Point3D_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // double x = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(Point3D, _impl_.x_)}},
    // double y = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(Point3D, _impl_.y_)}},
    // double z = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(Point3D, _impl_.z_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double x = 1;
    {PROTOBUF_FIELD_OFFSET(Point3D, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double y = 2;
    {PROTOBUF_FIELD_OFFSET(Point3D, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double z = 3;
    {PROTOBUF_FIELD_OFFSET(Point3D, _impl_.z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Point3D::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CoSimulation.Point3D)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double x = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  ::uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_x(), target);
  }

  // double y = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  ::uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_y(), target);
  }

  // double z = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  ::uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CoSimulation.Point3D)
  return target;
}

::size_t Point3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoSimulation.Point3D)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  ::uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 9;
  }

  // double y = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  ::uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 9;
  }

  // double z = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  ::uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Point3D::_class_data_ = {
    Point3D::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Point3D::GetClassData() const {
  return &_class_data_;
}

void Point3D::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Point3D*>(&to_msg);
  auto& from = static_cast<const Point3D&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CoSimulation.Point3D)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  ::uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  ::uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_z = from._internal_z();
  ::uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Point3D::CopyFrom(const Point3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoSimulation.Point3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Point3D::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Point3D::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Point3D::InternalSwap(Point3D* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point3D, _impl_.z_)
      + sizeof(Point3D::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Point3D, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata Point3D::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CoSimulation_2eproto_getter, &descriptor_table_CoSimulation_2eproto_once,
      file_level_metadata_CoSimulation_2eproto[0]);
}
// ===================================================================

class Size::_Internal {
 public:
};

Size::Size(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CoSimulation.Size)
}
Size::Size(
    ::google::protobuf::Arena* arena, const Size& from)
    : Size(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Size::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Size::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, length_),
           0,
           offsetof(Impl_, height_) -
               offsetof(Impl_, length_) +
               sizeof(Impl_::height_));
}
Size::~Size() {
  // @@protoc_insertion_point(destructor:CoSimulation.Size)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Size::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Size::Clear() {
// @@protoc_insertion_point(message_clear_start:CoSimulation.Size)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.length_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.length_)) + sizeof(_impl_.height_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Size::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> Size::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Size_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // double length = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(Size, _impl_.length_)}},
    // double width = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(Size, _impl_.width_)}},
    // double height = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(Size, _impl_.height_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double length = 1;
    {PROTOBUF_FIELD_OFFSET(Size, _impl_.length_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double width = 2;
    {PROTOBUF_FIELD_OFFSET(Size, _impl_.width_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double height = 3;
    {PROTOBUF_FIELD_OFFSET(Size, _impl_.height_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Size::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CoSimulation.Size)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double length = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_length = this->_internal_length();
  ::uint64_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_length(), target);
  }

  // double width = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_width = this->_internal_width();
  ::uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_width(), target);
  }

  // double height = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_height = this->_internal_height();
  ::uint64_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CoSimulation.Size)
  return target;
}

::size_t Size::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoSimulation.Size)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double length = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_length = this->_internal_length();
  ::uint64_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    total_size += 9;
  }

  // double width = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_width = this->_internal_width();
  ::uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    total_size += 9;
  }

  // double height = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_height = this->_internal_height();
  ::uint64_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Size::_class_data_ = {
    Size::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Size::GetClassData() const {
  return &_class_data_;
}

void Size::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Size*>(&to_msg);
  auto& from = static_cast<const Size&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CoSimulation.Size)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_length = from._internal_length();
  ::uint64_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_width = from._internal_width();
  ::uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_height = from._internal_height();
  ::uint64_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Size::CopyFrom(const Size& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoSimulation.Size)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Size::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Size::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Size::InternalSwap(Size* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Size, _impl_.height_)
      + sizeof(Size::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(Size, _impl_.length_)>(
          reinterpret_cast<char*>(&_impl_.length_),
          reinterpret_cast<char*>(&other->_impl_.length_));
}

::google::protobuf::Metadata Size::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CoSimulation_2eproto_getter, &descriptor_table_CoSimulation_2eproto_once,
      file_level_metadata_CoSimulation_2eproto[1]);
}
// ===================================================================

class Rotation::_Internal {
 public:
};

Rotation::Rotation(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CoSimulation.Rotation)
}
Rotation::Rotation(
    ::google::protobuf::Arena* arena, const Rotation& from)
    : Rotation(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Rotation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Rotation::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, yaw_),
           0,
           offsetof(Impl_, roll_) -
               offsetof(Impl_, yaw_) +
               sizeof(Impl_::roll_));
}
Rotation::~Rotation() {
  // @@protoc_insertion_point(destructor:CoSimulation.Rotation)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Rotation::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Rotation::Clear() {
// @@protoc_insertion_point(message_clear_start:CoSimulation.Rotation)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.yaw_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.roll_) -
      reinterpret_cast<char*>(&_impl_.yaw_)) + sizeof(_impl_.roll_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Rotation::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> Rotation::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Rotation_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // double yaw = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(Rotation, _impl_.yaw_)}},
    // double pitch = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(Rotation, _impl_.pitch_)}},
    // double roll = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(Rotation, _impl_.roll_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double yaw = 1;
    {PROTOBUF_FIELD_OFFSET(Rotation, _impl_.yaw_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double pitch = 2;
    {PROTOBUF_FIELD_OFFSET(Rotation, _impl_.pitch_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double roll = 3;
    {PROTOBUF_FIELD_OFFSET(Rotation, _impl_.roll_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Rotation::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CoSimulation.Rotation)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double yaw = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_yaw = this->_internal_yaw();
  ::uint64_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_yaw(), target);
  }

  // double pitch = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_pitch = this->_internal_pitch();
  ::uint64_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_pitch(), target);
  }

  // double roll = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_roll = this->_internal_roll();
  ::uint64_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_roll(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CoSimulation.Rotation)
  return target;
}

::size_t Rotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoSimulation.Rotation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double yaw = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_yaw = this->_internal_yaw();
  ::uint64_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 9;
  }

  // double pitch = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_pitch = this->_internal_pitch();
  ::uint64_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    total_size += 9;
  }

  // double roll = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_roll = this->_internal_roll();
  ::uint64_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Rotation::_class_data_ = {
    Rotation::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Rotation::GetClassData() const {
  return &_class_data_;
}

void Rotation::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Rotation*>(&to_msg);
  auto& from = static_cast<const Rotation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CoSimulation.Rotation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_yaw = from._internal_yaw();
  ::uint64_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _this->_internal_set_yaw(from._internal_yaw());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_pitch = from._internal_pitch();
  ::uint64_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    _this->_internal_set_pitch(from._internal_pitch());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_roll = from._internal_roll();
  ::uint64_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    _this->_internal_set_roll(from._internal_roll());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Rotation::CopyFrom(const Rotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoSimulation.Rotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Rotation::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Rotation::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Rotation::InternalSwap(Rotation* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rotation, _impl_.roll_)
      + sizeof(Rotation::_impl_.roll_)
      - PROTOBUF_FIELD_OFFSET(Rotation, _impl_.yaw_)>(
          reinterpret_cast<char*>(&_impl_.yaw_),
          reinterpret_cast<char*>(&other->_impl_.yaw_));
}

::google::protobuf::Metadata Rotation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CoSimulation_2eproto_getter, &descriptor_table_CoSimulation_2eproto_once,
      file_level_metadata_CoSimulation_2eproto[2]);
}
// ===================================================================

class VehicleProto::_Internal {
 public:
  using HasBits = decltype(std::declval<VehicleProto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(VehicleProto, _impl_._has_bits_);
  static const ::CoSimulation::Point3D& position(const VehicleProto* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CoSimulation::Point3D& linear_velocity(const VehicleProto* msg);
  static void set_has_linear_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CoSimulation::Size& size(const VehicleProto* msg);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CoSimulation::Rotation& heading(const VehicleProto* msg);
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CoSimulation::Point3D& VehicleProto::_Internal::position(const VehicleProto* msg) {
  return *msg->_impl_.position_;
}
const ::CoSimulation::Point3D& VehicleProto::_Internal::linear_velocity(const VehicleProto* msg) {
  return *msg->_impl_.linear_velocity_;
}
const ::CoSimulation::Size& VehicleProto::_Internal::size(const VehicleProto* msg) {
  return *msg->_impl_.size_;
}
const ::CoSimulation::Rotation& VehicleProto::_Internal::heading(const VehicleProto* msg) {
  return *msg->_impl_.heading_;
}
VehicleProto::VehicleProto(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CoSimulation.VehicleProto)
}
inline PROTOBUF_NDEBUG_INLINE VehicleProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        source_(arena, from.source_) {}

VehicleProto::VehicleProto(
    ::google::protobuf::Arena* arena,
    const VehicleProto& from)
    : ::google::protobuf::Message(arena) {
  VehicleProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.position_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::CoSimulation::Point3D>(arena, *from._impl_.position_)
                : nullptr;
  _impl_.linear_velocity_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::CoSimulation::Point3D>(arena, *from._impl_.linear_velocity_)
                : nullptr;
  _impl_.size_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::CoSimulation::Size>(arena, *from._impl_.size_)
                : nullptr;
  _impl_.heading_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::CoSimulation::Rotation>(arena, *from._impl_.heading_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, id_),
           offsetof(Impl_, timestamp_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::timestamp_));

  // @@protoc_insertion_point(copy_constructor:CoSimulation.VehicleProto)
}
inline PROTOBUF_NDEBUG_INLINE VehicleProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        source_(arena) {}

inline void VehicleProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, position_),
           0,
           offsetof(Impl_, timestamp_) -
               offsetof(Impl_, position_) +
               sizeof(Impl_::timestamp_));
}
VehicleProto::~VehicleProto() {
  // @@protoc_insertion_point(destructor:CoSimulation.VehicleProto)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void VehicleProto::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.source_.Destroy();
  delete _impl_.position_;
  delete _impl_.linear_velocity_;
  delete _impl_.size_;
  delete _impl_.heading_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void VehicleProto::Clear() {
// @@protoc_insertion_point(message_clear_start:CoSimulation.VehicleProto)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.source_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.linear_velocity_ != nullptr);
      _impl_.linear_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.size_ != nullptr);
      _impl_.size_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.heading_ != nullptr);
      _impl_.heading_->Clear();
    }
  }
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.timestamp_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.timestamp_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* VehicleProto::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 4, 48, 2> VehicleProto::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(VehicleProto, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_VehicleProto_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // double timestamp = 8;
    {::_pbi::TcParser::FastF64S1,
     {65, 63, 0, PROTOBUF_FIELD_OFFSET(VehicleProto, _impl_.timestamp_)}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VehicleProto, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(VehicleProto, _impl_.id_)}},
    // .CoSimulation.Type type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VehicleProto, _impl_.type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(VehicleProto, _impl_.type_)}},
    // .CoSimulation.Point3D position = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(VehicleProto, _impl_.position_)}},
    // .CoSimulation.Point3D linear_velocity = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(VehicleProto, _impl_.linear_velocity_)}},
    // .CoSimulation.Size size = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 2, 2, PROTOBUF_FIELD_OFFSET(VehicleProto, _impl_.size_)}},
    // .CoSimulation.Rotation heading = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 3, 3, PROTOBUF_FIELD_OFFSET(VehicleProto, _impl_.heading_)}},
    // string source = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(VehicleProto, _impl_.source_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(VehicleProto, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .CoSimulation.Type type = 2;
    {PROTOBUF_FIELD_OFFSET(VehicleProto, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .CoSimulation.Point3D position = 3;
    {PROTOBUF_FIELD_OFFSET(VehicleProto, _impl_.position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .CoSimulation.Point3D linear_velocity = 4;
    {PROTOBUF_FIELD_OFFSET(VehicleProto, _impl_.linear_velocity_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .CoSimulation.Size size = 5;
    {PROTOBUF_FIELD_OFFSET(VehicleProto, _impl_.size_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .CoSimulation.Rotation heading = 6;
    {PROTOBUF_FIELD_OFFSET(VehicleProto, _impl_.heading_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string source = 7;
    {PROTOBUF_FIELD_OFFSET(VehicleProto, _impl_.source_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double timestamp = 8;
    {PROTOBUF_FIELD_OFFSET(VehicleProto, _impl_.timestamp_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CoSimulation::Point3D>()},
    {::_pbi::TcParser::GetTable<::CoSimulation::Point3D>()},
    {::_pbi::TcParser::GetTable<::CoSimulation::Size>()},
    {::_pbi::TcParser::GetTable<::CoSimulation::Rotation>()},
  }}, {{
    "\31\0\0\0\0\0\0\6\0\0\0\0\0\0\0\0"
    "CoSimulation.VehicleProto"
    "source"
  }},
};

::uint8_t* VehicleProto::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CoSimulation.VehicleProto)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // .CoSimulation.Type type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .CoSimulation.Point3D position = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .CoSimulation.Point3D linear_velocity = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::linear_velocity(this),
        _Internal::linear_velocity(this).GetCachedSize(), target, stream);
  }

  // .CoSimulation.Size size = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::size(this),
        _Internal::size(this).GetCachedSize(), target, stream);
  }

  // .CoSimulation.Rotation heading = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::heading(this),
        _Internal::heading(this).GetCachedSize(), target, stream);
  }

  // string source = 7;
  if (!this->_internal_source().empty()) {
    const std::string& _s = this->_internal_source();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "CoSimulation.VehicleProto.source");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // double timestamp = 8;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_timestamp = this->_internal_timestamp();
  ::uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        8, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CoSimulation.VehicleProto)
  return target;
}

::size_t VehicleProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoSimulation.VehicleProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string source = 7;
  if (!this->_internal_source().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_source());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .CoSimulation.Point3D position = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.position_);
    }

    // .CoSimulation.Point3D linear_velocity = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.linear_velocity_);
    }

    // .CoSimulation.Size size = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.size_);
    }

    // .CoSimulation.Rotation heading = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.heading_);
    }

  }
  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // .CoSimulation.Type type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // double timestamp = 8;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_timestamp = this->_internal_timestamp();
  ::uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData VehicleProto::_class_data_ = {
    VehicleProto::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* VehicleProto::GetClassData() const {
  return &_class_data_;
}

void VehicleProto::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<VehicleProto*>(&to_msg);
  auto& from = static_cast<const VehicleProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CoSimulation.VehicleProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_source().empty()) {
    _this->_internal_set_source(from._internal_source());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_position()->::CoSimulation::Point3D::MergeFrom(
          from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_linear_velocity()->::CoSimulation::Point3D::MergeFrom(
          from._internal_linear_velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_size()->::CoSimulation::Size::MergeFrom(
          from._internal_size());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_heading()->::CoSimulation::Rotation::MergeFrom(
          from._internal_heading());
    }
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_timestamp = from._internal_timestamp();
  ::uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleProto::CopyFrom(const VehicleProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoSimulation.VehicleProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool VehicleProto::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* VehicleProto::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void VehicleProto::InternalSwap(VehicleProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.source_, &other->_impl_.source_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleProto, _impl_.timestamp_)
      + sizeof(VehicleProto::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(VehicleProto, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata VehicleProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CoSimulation_2eproto_getter, &descriptor_table_CoSimulation_2eproto_once,
      file_level_metadata_CoSimulation_2eproto[3]);
}
// ===================================================================

class VehicleList::_Internal {
 public:
};

VehicleList::VehicleList(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CoSimulation.VehicleList)
}
inline PROTOBUF_NDEBUG_INLINE VehicleList::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : vehicles_{visibility, arena, from.vehicles_},
        _cached_size_{0} {}

VehicleList::VehicleList(
    ::google::protobuf::Arena* arena,
    const VehicleList& from)
    : ::google::protobuf::Message(arena) {
  VehicleList* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.timestamp_ = from._impl_.timestamp_;

  // @@protoc_insertion_point(copy_constructor:CoSimulation.VehicleList)
}
inline PROTOBUF_NDEBUG_INLINE VehicleList::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : vehicles_{visibility, arena},
        _cached_size_{0} {}

inline void VehicleList::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.timestamp_ = {};
}
VehicleList::~VehicleList() {
  // @@protoc_insertion_point(destructor:CoSimulation.VehicleList)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void VehicleList::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void VehicleList::Clear() {
// @@protoc_insertion_point(message_clear_start:CoSimulation.VehicleList)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vehicles_.Clear();
  _impl_.timestamp_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* VehicleList::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> VehicleList::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_VehicleList_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .CoSimulation.VehicleProto vehicles = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(VehicleList, _impl_.vehicles_)}},
    // double timestamp = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(VehicleList, _impl_.timestamp_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double timestamp = 1;
    {PROTOBUF_FIELD_OFFSET(VehicleList, _impl_.timestamp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // repeated .CoSimulation.VehicleProto vehicles = 2;
    {PROTOBUF_FIELD_OFFSET(VehicleList, _impl_.vehicles_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CoSimulation::VehicleProto>()},
  }}, {{
  }},
};

::uint8_t* VehicleList::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CoSimulation.VehicleList)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double timestamp = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_timestamp = this->_internal_timestamp();
  ::uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_timestamp(), target);
  }

  // repeated .CoSimulation.VehicleProto vehicles = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vehicles_size()); i < n; i++) {
    const auto& repfield = this->_internal_vehicles().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CoSimulation.VehicleList)
  return target;
}

::size_t VehicleList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoSimulation.VehicleList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CoSimulation.VehicleProto vehicles = 2;
  total_size += 1UL * this->_internal_vehicles_size();
  for (const auto& msg : this->_internal_vehicles()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // double timestamp = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_timestamp = this->_internal_timestamp();
  ::uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData VehicleList::_class_data_ = {
    VehicleList::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* VehicleList::GetClassData() const {
  return &_class_data_;
}

void VehicleList::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<VehicleList*>(&to_msg);
  auto& from = static_cast<const VehicleList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CoSimulation.VehicleList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_vehicles()->MergeFrom(
      from._internal_vehicles());
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_timestamp = from._internal_timestamp();
  ::uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleList::CopyFrom(const VehicleList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoSimulation.VehicleList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool VehicleList::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* VehicleList::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void VehicleList::InternalSwap(VehicleList* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vehicles_.InternalSwap(&other->_impl_.vehicles_);
        swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::google::protobuf::Metadata VehicleList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CoSimulation_2eproto_getter, &descriptor_table_CoSimulation_2eproto_once,
      file_level_metadata_CoSimulation_2eproto[4]);
}
// ===================================================================

class TessngVehicleProto::_Internal {
 public:
  using HasBits = decltype(std::declval<TessngVehicleProto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TessngVehicleProto, _impl_._has_bits_);
  static const ::CoSimulation::Point3D& position(const TessngVehicleProto* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CoSimulation::Point3D& linear_velocity(const TessngVehicleProto* msg);
  static void set_has_linear_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CoSimulation::Size& size(const TessngVehicleProto* msg);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CoSimulation::Rotation& heading(const TessngVehicleProto* msg);
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CoSimulation::Point3D& TessngVehicleProto::_Internal::position(const TessngVehicleProto* msg) {
  return *msg->_impl_.position_;
}
const ::CoSimulation::Point3D& TessngVehicleProto::_Internal::linear_velocity(const TessngVehicleProto* msg) {
  return *msg->_impl_.linear_velocity_;
}
const ::CoSimulation::Size& TessngVehicleProto::_Internal::size(const TessngVehicleProto* msg) {
  return *msg->_impl_.size_;
}
const ::CoSimulation::Rotation& TessngVehicleProto::_Internal::heading(const TessngVehicleProto* msg) {
  return *msg->_impl_.heading_;
}
TessngVehicleProto::TessngVehicleProto(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CoSimulation.TessngVehicleProto)
}
inline PROTOBUF_NDEBUG_INLINE TessngVehicleProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        blueprint_(arena, from.blueprint_) {}

TessngVehicleProto::TessngVehicleProto(
    ::google::protobuf::Arena* arena,
    const TessngVehicleProto& from)
    : ::google::protobuf::Message(arena) {
  TessngVehicleProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.position_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::CoSimulation::Point3D>(arena, *from._impl_.position_)
                : nullptr;
  _impl_.linear_velocity_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::CoSimulation::Point3D>(arena, *from._impl_.linear_velocity_)
                : nullptr;
  _impl_.size_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::CoSimulation::Size>(arena, *from._impl_.size_)
                : nullptr;
  _impl_.heading_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::CoSimulation::Rotation>(arena, *from._impl_.heading_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, id_),
           offsetof(Impl_, vehicletypecode_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::vehicletypecode_));

  // @@protoc_insertion_point(copy_constructor:CoSimulation.TessngVehicleProto)
}
inline PROTOBUF_NDEBUG_INLINE TessngVehicleProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        blueprint_(arena) {}

inline void TessngVehicleProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, position_),
           0,
           offsetof(Impl_, vehicletypecode_) -
               offsetof(Impl_, position_) +
               sizeof(Impl_::vehicletypecode_));
}
TessngVehicleProto::~TessngVehicleProto() {
  // @@protoc_insertion_point(destructor:CoSimulation.TessngVehicleProto)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TessngVehicleProto::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.blueprint_.Destroy();
  delete _impl_.position_;
  delete _impl_.linear_velocity_;
  delete _impl_.size_;
  delete _impl_.heading_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TessngVehicleProto::Clear() {
// @@protoc_insertion_point(message_clear_start:CoSimulation.TessngVehicleProto)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.blueprint_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.linear_velocity_ != nullptr);
      _impl_.linear_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.size_ != nullptr);
      _impl_.size_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.heading_ != nullptr);
      _impl_.heading_->Clear();
    }
  }
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.vehicletypecode_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.vehicletypecode_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TessngVehicleProto::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 4, 57, 2> TessngVehicleProto::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TessngVehicleProto, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TessngVehicleProto_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string blueprint = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(TessngVehicleProto, _impl_.blueprint_)}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TessngVehicleProto, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TessngVehicleProto, _impl_.id_)}},
    // .CoSimulation.Type type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TessngVehicleProto, _impl_.type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TessngVehicleProto, _impl_.type_)}},
    // int32 vehicleTypeCode = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TessngVehicleProto, _impl_.vehicletypecode_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TessngVehicleProto, _impl_.vehicletypecode_)}},
    // .CoSimulation.Point3D position = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(TessngVehicleProto, _impl_.position_)}},
    // .CoSimulation.Point3D linear_velocity = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 1, 1, PROTOBUF_FIELD_OFFSET(TessngVehicleProto, _impl_.linear_velocity_)}},
    // .CoSimulation.Size size = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 2, 2, PROTOBUF_FIELD_OFFSET(TessngVehicleProto, _impl_.size_)}},
    // .CoSimulation.Rotation heading = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 3, 3, PROTOBUF_FIELD_OFFSET(TessngVehicleProto, _impl_.heading_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(TessngVehicleProto, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .CoSimulation.Type type = 2;
    {PROTOBUF_FIELD_OFFSET(TessngVehicleProto, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 vehicleTypeCode = 3;
    {PROTOBUF_FIELD_OFFSET(TessngVehicleProto, _impl_.vehicletypecode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .CoSimulation.Point3D position = 4;
    {PROTOBUF_FIELD_OFFSET(TessngVehicleProto, _impl_.position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .CoSimulation.Point3D linear_velocity = 5;
    {PROTOBUF_FIELD_OFFSET(TessngVehicleProto, _impl_.linear_velocity_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .CoSimulation.Size size = 6;
    {PROTOBUF_FIELD_OFFSET(TessngVehicleProto, _impl_.size_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .CoSimulation.Rotation heading = 7;
    {PROTOBUF_FIELD_OFFSET(TessngVehicleProto, _impl_.heading_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string blueprint = 8;
    {PROTOBUF_FIELD_OFFSET(TessngVehicleProto, _impl_.blueprint_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CoSimulation::Point3D>()},
    {::_pbi::TcParser::GetTable<::CoSimulation::Point3D>()},
    {::_pbi::TcParser::GetTable<::CoSimulation::Size>()},
    {::_pbi::TcParser::GetTable<::CoSimulation::Rotation>()},
  }}, {{
    "\37\0\0\0\0\0\0\0\11\0\0\0\0\0\0\0"
    "CoSimulation.TessngVehicleProto"
    "blueprint"
  }},
};

::uint8_t* TessngVehicleProto::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CoSimulation.TessngVehicleProto)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // .CoSimulation.Type type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_type(), target);
  }

  // int32 vehicleTypeCode = 3;
  if (this->_internal_vehicletypecode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_vehicletypecode(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .CoSimulation.Point3D position = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .CoSimulation.Point3D linear_velocity = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::linear_velocity(this),
        _Internal::linear_velocity(this).GetCachedSize(), target, stream);
  }

  // .CoSimulation.Size size = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::size(this),
        _Internal::size(this).GetCachedSize(), target, stream);
  }

  // .CoSimulation.Rotation heading = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::heading(this),
        _Internal::heading(this).GetCachedSize(), target, stream);
  }

  // string blueprint = 8;
  if (!this->_internal_blueprint().empty()) {
    const std::string& _s = this->_internal_blueprint();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "CoSimulation.TessngVehicleProto.blueprint");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CoSimulation.TessngVehicleProto)
  return target;
}

::size_t TessngVehicleProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoSimulation.TessngVehicleProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string blueprint = 8;
  if (!this->_internal_blueprint().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_blueprint());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .CoSimulation.Point3D position = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.position_);
    }

    // .CoSimulation.Point3D linear_velocity = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.linear_velocity_);
    }

    // .CoSimulation.Size size = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.size_);
    }

    // .CoSimulation.Rotation heading = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.heading_);
    }

  }
  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // .CoSimulation.Type type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 vehicleTypeCode = 3;
  if (this->_internal_vehicletypecode() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_vehicletypecode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TessngVehicleProto::_class_data_ = {
    TessngVehicleProto::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TessngVehicleProto::GetClassData() const {
  return &_class_data_;
}

void TessngVehicleProto::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TessngVehicleProto*>(&to_msg);
  auto& from = static_cast<const TessngVehicleProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CoSimulation.TessngVehicleProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_blueprint().empty()) {
    _this->_internal_set_blueprint(from._internal_blueprint());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_position()->::CoSimulation::Point3D::MergeFrom(
          from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_linear_velocity()->::CoSimulation::Point3D::MergeFrom(
          from._internal_linear_velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_size()->::CoSimulation::Size::MergeFrom(
          from._internal_size());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_heading()->::CoSimulation::Rotation::MergeFrom(
          from._internal_heading());
    }
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_vehicletypecode() != 0) {
    _this->_internal_set_vehicletypecode(from._internal_vehicletypecode());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TessngVehicleProto::CopyFrom(const TessngVehicleProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoSimulation.TessngVehicleProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TessngVehicleProto::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TessngVehicleProto::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TessngVehicleProto::InternalSwap(TessngVehicleProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.blueprint_, &other->_impl_.blueprint_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TessngVehicleProto, _impl_.vehicletypecode_)
      + sizeof(TessngVehicleProto::_impl_.vehicletypecode_)
      - PROTOBUF_FIELD_OFFSET(TessngVehicleProto, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata TessngVehicleProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CoSimulation_2eproto_getter, &descriptor_table_CoSimulation_2eproto_once,
      file_level_metadata_CoSimulation_2eproto[5]);
}
// ===================================================================

class TessngVehicleList::_Internal {
 public:
};

TessngVehicleList::TessngVehicleList(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CoSimulation.TessngVehicleList)
}
inline PROTOBUF_NDEBUG_INLINE TessngVehicleList::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : vehicles_{visibility, arena, from.vehicles_},
        _cached_size_{0} {}

TessngVehicleList::TessngVehicleList(
    ::google::protobuf::Arena* arena,
    const TessngVehicleList& from)
    : ::google::protobuf::Message(arena) {
  TessngVehicleList* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.timestamp_ = from._impl_.timestamp_;

  // @@protoc_insertion_point(copy_constructor:CoSimulation.TessngVehicleList)
}
inline PROTOBUF_NDEBUG_INLINE TessngVehicleList::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : vehicles_{visibility, arena},
        _cached_size_{0} {}

inline void TessngVehicleList::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.timestamp_ = {};
}
TessngVehicleList::~TessngVehicleList() {
  // @@protoc_insertion_point(destructor:CoSimulation.TessngVehicleList)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TessngVehicleList::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TessngVehicleList::Clear() {
// @@protoc_insertion_point(message_clear_start:CoSimulation.TessngVehicleList)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vehicles_.Clear();
  _impl_.timestamp_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TessngVehicleList::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> TessngVehicleList::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TessngVehicleList_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .CoSimulation.TessngVehicleProto vehicles = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TessngVehicleList, _impl_.vehicles_)}},
    // double timestamp = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(TessngVehicleList, _impl_.timestamp_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double timestamp = 1;
    {PROTOBUF_FIELD_OFFSET(TessngVehicleList, _impl_.timestamp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // repeated .CoSimulation.TessngVehicleProto vehicles = 2;
    {PROTOBUF_FIELD_OFFSET(TessngVehicleList, _impl_.vehicles_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CoSimulation::TessngVehicleProto>()},
  }}, {{
  }},
};

::uint8_t* TessngVehicleList::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CoSimulation.TessngVehicleList)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double timestamp = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_timestamp = this->_internal_timestamp();
  ::uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_timestamp(), target);
  }

  // repeated .CoSimulation.TessngVehicleProto vehicles = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vehicles_size()); i < n; i++) {
    const auto& repfield = this->_internal_vehicles().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CoSimulation.TessngVehicleList)
  return target;
}

::size_t TessngVehicleList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoSimulation.TessngVehicleList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CoSimulation.TessngVehicleProto vehicles = 2;
  total_size += 1UL * this->_internal_vehicles_size();
  for (const auto& msg : this->_internal_vehicles()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // double timestamp = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_timestamp = this->_internal_timestamp();
  ::uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TessngVehicleList::_class_data_ = {
    TessngVehicleList::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TessngVehicleList::GetClassData() const {
  return &_class_data_;
}

void TessngVehicleList::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TessngVehicleList*>(&to_msg);
  auto& from = static_cast<const TessngVehicleList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CoSimulation.TessngVehicleList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_vehicles()->MergeFrom(
      from._internal_vehicles());
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_timestamp = from._internal_timestamp();
  ::uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TessngVehicleList::CopyFrom(const TessngVehicleList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoSimulation.TessngVehicleList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TessngVehicleList::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TessngVehicleList::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TessngVehicleList::InternalSwap(TessngVehicleList* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vehicles_.InternalSwap(&other->_impl_.vehicles_);
        swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::google::protobuf::Metadata TessngVehicleList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CoSimulation_2eproto_getter, &descriptor_table_CoSimulation_2eproto_once,
      file_level_metadata_CoSimulation_2eproto[6]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace CoSimulation
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
